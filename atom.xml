<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xzso3o.github.io/"/>
  <updated>2021-01-19T13:01:53.438Z</updated>
  <id>https://xzso3o.github.io/</id>
  
  <author>
    <name>xzs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>集合框架</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</id>
    <published>2021-01-19T12:04:43.000Z</published>
    <updated>2021-01-19T13:01:53.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><p>多个对象、多种类型，进行存储，数组</p><p>1、数组长度不可变</p><p>2、数组存入的数据类型必须是统一的</p><p>集合就是来解决问题的，替代数组来存储多个对象，多种数据类型</p><p>集合底层就是一个长度可变、类型可变的动态数组。</p><p>集合不是由一个类来完成的，而是由一组接口和类共同构成一个框架体系。</p><p>大致分为 3 层，最上层是接口，第二层是实现类，第三层是对集合进行操作的各种工具类。</p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>集合框架中最基础的父接口，可以存储一组无序、不唯一的对象。</p><p>迭代器 遍历集合</p><p>Collection 中的各种方法就组成了集合框架的基础</p><blockquote><p>Collection 的主要子接口</p></blockquote><ul><li>List：存放有序、不唯一的元素</li><li>Set：存放无序、唯一的元素</li><li>Queue：队列接口</li></ul><a id="more"></a><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List 接口在继承 Collection 接口的基础上进行了 API 的扩展</p><p>get(int index)：通过下标找到元素</p><p>set(int index,Object o)：在指定下标处插入元素</p><p>indexOf(Object o)：找到元素在集合中的下标</p><blockquote><p>List 接口的实现类</p></blockquote><p>ArrayList 实现了长度可变的数组，底层是数组。</p><p>特点：查询快，增删慢</p><p>在内存中是一串连续的空间来存储数据。</p><p>LinkedList 底层是基于链表的结构，特点和 ArrayList 恰好相反</p><p>特点：查询慢、增删快</p><p>内存空间是不连续的，通过指针（前驱指针、后继指针）进行关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        arrayList.add(<span class="string">"Hello"</span>);</span><br><span class="line">        arrayList.add(<span class="string">"World"</span>);</span><br><span class="line">        arrayList.add(<span class="string">"JavaSE"</span>);</span><br><span class="line">        arrayList.add(<span class="string">"JavaME"</span>);</span><br><span class="line">        arrayList.add(<span class="string">"JavaEE"</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        System.out.println(arrayList.contains(<span class="string">"Hello"</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">            System.out.println(arrayList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//迭代器，也可以遍历集合</span></span><br><span class="line">        Iterator iterator = arrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------"</span>);</span><br><span class="line">        iterator = arrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">        System.out.println(arrayList.remove(<span class="number">2</span>));</span><br><span class="line">        System.out.println(arrayList.size());</span><br><span class="line">        arrayList.add(<span class="number">1</span>, <span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        System.out.println(arrayList.indexOf(<span class="string">"abc"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>Vector 是早期的一个 List 实现类，用法基本和 ArrayList 一致。</p><p>Vector 是线程安全的集合，Vector 都是用 synchronized 修饰的，</p><p>ArrayList 是线程不安全的集合。</p><p>线程安全的同时带来的缺陷是效率低、执行速度慢</p><p><strong>Vector、ArrayList、LinkedList 的区别？</strong></p><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>Stack 是 Vector 的子类，Java 语言对栈这种数据结构的实现，后进先出</p><p>Java 借助于 List 容器来实现栈的特性</p><p>push 是入栈，将元素添加到栈中</p><p>peek 是取出栈顶元素的值，但是栈顶不出栈</p><p>pop 是直接让栈顶元素出栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        stack.push(<span class="string">"Hello"</span>);</span><br><span class="line">        stack.push(<span class="string">"JavaSE"</span>);</span><br><span class="line">        stack.push(<span class="string">"JavaME"</span>);</span><br><span class="line">        stack.push(<span class="string">"JavaEE"</span>);</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; stack.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(stack.get(i));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set 是 Collection 的子接口，Set 中存储的数据没有顺序，存储一组<strong>无序且唯一</strong>（数据不会重复）的数据。</p><p>List 存储一组有序（元素有下标）且不唯一（元素可以重复）的数据</p><p>Set 存储一组无序（元素没有下标）且唯一（元素不能重复）的数据</p><h3 id="Set常用的实现类"><a href="#Set常用的实现类" class="headerlink" title="Set常用的实现类"></a>Set常用的实现类</h3><p>HashSet 是开发中使用频率较高的 Set 的实现类，存储一组无序且唯一的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet hashSet = <span class="keyword">new</span> HashSet();</span><br><span class="line">        hashSet.add(<span class="string">"Hello"</span>);</span><br><span class="line">        hashSet.add(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(hashSet.add(<span class="string">"Java"</span>));</span><br><span class="line">        hashSet.add(<span class="string">"Python"</span>);</span><br><span class="line">        hashSet.add(<span class="string">"C++"</span>);</span><br><span class="line">        hashSet.add(<span class="string">"HTML"</span>);</span><br><span class="line">        System.out.println(hashSet.add(<span class="string">"Java"</span>));</span><br><span class="line">        System.out.println(hashSet);</span><br><span class="line">        System.out.println(hashSet.size());</span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------"</span>);</span><br><span class="line">        Iterator iterator = hashSet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LinkedHashSet 是 Set 另外一个实现类，可以存储一组有序且唯一的元素，这里的有序不是说元素有下标，这里的元素依然没有下标，有序是指元素存入的顺序和遍历的顺序是一致的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedHashSet linkedHashSet = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">        linkedHashSet.add(<span class="string">"Hello"</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">"World"</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">"Java"</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">"Python"</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">"C++"</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">"HTML"</span>);</span><br><span class="line">        System.out.println(linkedHashSet);</span><br><span class="line">        Iterator iterator = linkedHashSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(linkedHashSet.remove(<span class="string">"C++"</span>));</span><br><span class="line">        System.out.println(linkedHashSet.remove(<span class="string">"C++"</span>));</span><br><span class="line">        System.out.println(linkedHashSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hashCode 即使两个对象不一样，hashCode 的值也有可能相等</p><p>不能单纯用 hashCode 相等就来判断两个对象相等，如果 hashCode 值不相等，那么肯定是两个对象，但是 hashCode 值相等，不一定就是一个对象，进一步通过 eqauls 方法进行判断，如果 equals 方法返回 true，才能认为对象相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedHashSet linkedHashSet = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> A(<span class="number">1</span>));</span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> A(<span class="number">1</span>));</span><br><span class="line">        System.out.println(linkedHashSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A&#123;"</span> +</span><br><span class="line">                <span class="string">"num="</span> + num +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeSet 中也可以保存有序元素，这里的有序和 LinkedHashSet 不一样</p><p>LinkedHashSet 的有序是指元素的存入顺序和遍历顺序一致（怎么存怎么取）</p><p>TreeSet 的有序是指集合内部会自动给所有元素按照升序进行排队（大小个排队）</p><p>Java 中的接口是用来描述功能的，一个接口就表示某种功能 </p><p>java.lang.Comparable 的功能就是比较大小，哪个类实现了 Comparable 接口，就意味着该类的实例化具备比较大小的能力了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按大小排序</span></span><br><span class="line">        TreeSet treeSet = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> B(<span class="number">1</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> B(<span class="number">3</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> B(<span class="number">6</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> B(<span class="number">2</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> B(<span class="number">5</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> B(<span class="number">4</span>));</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"B&#123;"</span> +</span><br><span class="line">                <span class="string">"num="</span> + num +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * A.compareTo(B)</span></span><br><span class="line"><span class="comment">         * 1:A &gt; B</span></span><br><span class="line"><span class="comment">         * 0:A = B</span></span><br><span class="line"><span class="comment">         * -1:A &lt; B</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        B b = (B)o;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.num &gt; b.num)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.num == b.num)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Set、List 都是 Collection 的子接口，Map 跟 Collection 是兄弟关系，平行的另外一套集合体系。</p><p>Set、List、Collection 只能操作单个元素，Map 可以操作一对元素（两个元素），这两个值是键值对的形式（key-value）</p><p>value 是真正的值，key 是 value 的别名</p><p>HashMap 是 Map 常用的实现类，存储一组无序，key 不可重复，value 可重复的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(<span class="string">"h"</span>, <span class="string">"Hello"</span>);</span><br><span class="line">        hashMap.put(<span class="string">"w"</span>, <span class="string">"World"</span>);</span><br><span class="line">        hashMap.put(<span class="string">"j"</span>, <span class="string">"Java"</span>);</span><br><span class="line">        hashMap.put(<span class="string">"s"</span>, <span class="string">"JavaSE"</span>);</span><br><span class="line">        hashMap.put(<span class="string">"p"</span>,<span class="string">"Python"</span>);</span><br><span class="line">        hashMap.put(<span class="string">"c"</span>, <span class="string">"C++"</span>);</span><br><span class="line">        hashMap.put(<span class="string">"h2"</span>, <span class="string">"Hello"</span>);</span><br><span class="line">        System.out.println(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集合框架&quot;&gt;&lt;a href=&quot;#集合框架&quot; class=&quot;headerlink&quot; title=&quot;集合框架&quot;&gt;&lt;/a&gt;集合框架&lt;/h1&gt;&lt;p&gt;多个对象、多种类型，进行存储，数组&lt;/p&gt;
&lt;p&gt;1、数组长度不可变&lt;/p&gt;
&lt;p&gt;2、数组存入的数据类型必须是统一的&lt;/p&gt;
&lt;p&gt;集合就是来解决问题的，替代数组来存储多个对象，多种数据类型&lt;/p&gt;
&lt;p&gt;集合底层就是一个长度可变、类型可变的动态数组。&lt;/p&gt;
&lt;p&gt;集合不是由一个类来完成的，而是由一组接口和类共同构成一个框架体系。&lt;/p&gt;
&lt;p&gt;大致分为 3 层，最上层是接口，第二层是实现类，第三层是对集合进行操作的各种工具类。&lt;/p&gt;
&lt;h2 id=&quot;Collection&quot;&gt;&lt;a href=&quot;#Collection&quot; class=&quot;headerlink&quot; title=&quot;Collection&quot;&gt;&lt;/a&gt;Collection&lt;/h2&gt;&lt;p&gt;集合框架中最基础的父接口，可以存储一组无序、不唯一的对象。&lt;/p&gt;
&lt;p&gt;迭代器 遍历集合&lt;/p&gt;
&lt;p&gt;Collection 中的各种方法就组成了集合框架的基础&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Collection 的主要子接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;List：存放有序、不唯一的元素&lt;/li&gt;
&lt;li&gt;Set：存放无序、唯一的元素&lt;/li&gt;
&lt;li&gt;Queue：队列接口&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-01-19T07:26:41.000Z</published>
    <updated>2021-01-19T11:30:52.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>使用多线程可以让程序充分利用 CPU 的资源，提高 CPU 的使用效率，从而解决高并发带来的负载均衡问题。</p><p>缺点：</p><p>1、需要更多的内存空间来支持多线程的运行。</p><p>2、多线程并发访问可能会影响数据的准确性。</p><p>3、数据被多线程共享，可能出现死锁的情况。</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>计算机<strong>正在运行</strong>的一个独立的应用程序，就是一个进程。</p><p>线程是组成进程的基本单位，一个进程是由一个或多个线程组成的，每个线程都可以完成特定的功能。</p><p>应用程序是静态概念，进程和线程是动态概念，有创建有销毁，存在也是暂时的，不是永久的。</p><p>进程和线程的区别在于运行时是否拥有独立的内存空间，每个进程所占用的内存空间都是独立的。</p><p>但是多个线程是共享内存空间的，执行相互独立。</p><p>线程的执行必须依赖于进程，单独的线程是无法执行的，由进程控制线程的执行。</p><p>多线程是指在一个进程中，多个线程<strong>同时执行</strong>，这里的同时执行并不是真正意义上的同时执行，而是交替执行，系统资源按照时间段分别分配给不同的线程，多个线程是交替执行的，但是因为执行速度太快，感觉是同时执行的。</p><a id="more"></a><blockquote><p>单线程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.southwind.test;</span><br><span class="line"></span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">            System.out.println(&quot;------------------------MyTest&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Test++++++++++++++++++++++++++"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        MyTest myTest = <span class="keyword">new</span> MyTest();</span><br><span class="line">        myTest.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="/2021/01/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1.png" alt="1611041286349"></p><p>两个循环按顺序排队执行，循环就是任务，现在只有一个线程来执行这些任务，那么必然是排队执行。</p><blockquote><p>多线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"------------------------MyTest"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Test++++++++++++++++++++++++++"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/2.png" alt="1611041302182"></p><p>两个循环交替执行，两个线程同时跑两个任务，一个线程跑一个。</p><p>如何判断程序是单线程还是多线程？只需要分析程序有几条分支即可。</p><p><img src="/2021/01/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/3.png" alt="1611041328435"></p><p><img src="/2021/01/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/4.png" alt="1611041341960"></p><h1 id="Java-中线程的使用"><a href="#Java-中线程的使用" class="headerlink" title="Java 中线程的使用"></a>Java 中线程的使用</h1><h2 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h2><p>1、创建自定义类继承 Thread 类。</p><p>2、重写 Thread 类中的 run 方法，完成线程的业务逻辑代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程类1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;MyThread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.xzs.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程类2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"+++++++++++++++++++++++MyThread2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        MyThread2 thread2 = <span class="keyword">new</span> MyThread2();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>run方法和start方法的区别</p><p>run方法相当于普通方法调用，不会产生多线程的效果</p><p>start方法是开启线程争夺 CPU 资源，才会产生多线程的效果</p><h2 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h2><p>1、创建自定义类并实现 Runnable 接口。</p><p>2、实现 run 方法，编写该线程的业务逻辑。</p><p>3、实例化 Runnable 对象和 Thread 对象，同时将 Runnable 对象赋给 Thread 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"@@@@@@@MyRunnable@@@@@@"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"$$$$$$$$$$$$$$$$$$$$$$MyRunnable2$$$$$$$$$"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRunnable runnable1 = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(runnable1);</span><br><span class="line">        MyRunnable2 runnable2 = <span class="keyword">new</span> MyRunnable2();</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(runnable2);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际开发中推荐使用实现的方式来完成，因为可以做到解耦合。</p><p>Runnable 是专门用来描述任务的接口，Runnable 的实现类就是各种任务的具体实现。</p><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>线程有 5 种状态，在特定的情况下，线程可以在不同的状态之间切换。</p><p>1、创建状态：实例化一个新的线程对象，未启动。</p><p>2、就绪状态：创建好的线程对象调用 start 方法完成启动，进入线程池等待抢占 CPU 资源。</p><p>3、运行状态：线程对象获取了 CPU 资源，在分配给它的时间片段内执行任务。</p><p>4、阻塞状态：正在运行状态的线程暂停任务的执行，释放所占用的 CPU 资源。</p><p>5、终止状态：线程运行完毕或者因为异常导致该线程意外终止运行。</p><p><img src="/2021/01/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/5.png" alt="1611041646841"></p><h1 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h1><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><p>让当前线程暂停执行，从运行状态进入阻塞状态，将 CPU 资源让给其他线程的一种调度方式，通过 sleep 来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"+++++++++++++++++++main"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程合并"><a href="#线程合并" class="headerlink" title="线程合并"></a>线程合并</h2><p>合并的意思是将指定的线程加入到当前线程中，合并成一个线程，由两个线程交替执行变成一个线程中的两个子线程顺序执行。</p><p><strong>join()</strong> 实现合并，线程甲和线程乙，甲执行到某个时间节点的时候调用乙的 join 方法，则表示从当前时间开始 CPU 资源被线程乙独占，线程甲进入阻塞状态，直到线程乙执行完毕，线程甲进入就绪状态，等待获取 CPU 资源，进行执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JoinRunnable joinRunnable = <span class="keyword">new</span> JoinRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(joinRunnable);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    thread.join();<span class="comment">//线程join到main主线程</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"+++++++++++++++++main"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JoinRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">"----------------JoinRunnable"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>join 方法有重载，区别在于是否传入时间参数，重载的区别？</p><p>1、没有时间参数的 join，当子线程合并到主线程之后，子线程会独占 CPU 资源，释放的节点是子线程的任务全部执行完毕。</p><p>2、有时间参数的 join，传入的时间参数是 x，当子线程合并到主线程之后，子线程会独占 CPU 资源，释放的节点<strong>从合并的那一刻起到 x 时间结束</strong>，无论子线程是否执行完毕，都会释放 CPU 资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JoinRunnable joinRunnable = <span class="keyword">new</span> JoinRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(joinRunnable);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    thread.join(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"+++++++++++++++++main"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JoinRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i + <span class="string">"----------------JoinRunnable"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h2><p>线程礼让是指在某个特定的时间点，<strong>让线程暂停</strong>抢占 CPU 资源的行为，从运行状态或就绪状态来到阻塞状态，从而讲 CPU 资源让给其他线程来使用。</p><p><strong>只是在某个时间点去礼让，过了这个时间点，依然会争夺 CPU 资源。</strong></p><p>yield()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        YieldThread1 yieldThread1 = <span class="keyword">new</span> YieldThread1();</span><br><span class="line">        yieldThread1.setName(<span class="string">"线程甲"</span>);</span><br><span class="line">        YieldThread2 yieldThread2 = <span class="keyword">new</span> YieldThread2();</span><br><span class="line">        yieldThread2.setName(<span class="string">"线程乙"</span>);</span><br><span class="line">        yieldThread1.start();</span><br><span class="line">        yieldThread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YieldThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">                Thread.currentThread().yield();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"------"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YieldThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"------"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>同步和异步的区别</p><p>同步是指排队按顺序，依次执行，第一步执行完毕，才能执行第二步，等。</p><p>异步是指没有顺序不排队，同时执行，第一步没有执行，就可以执行第二步，不用等。</p><p>线程同步是对资源的一种保护，当多个线程同时访问某个资源时，多个线程必须排队使用，而不能一起使用。</p><p>多个线程同时操作一个共享数据，可能会导致<strong>数据不准确</strong>的情况。</p><p>要解决这个问题，如何解决？使用线程同步。</p><p><strong>synchronized</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(account);</span><br><span class="line">        thread1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(account);</span><br><span class="line">        thread2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer num = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Test2<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"是当前的第"</span> + num + <span class="string">"位访客"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(account);</span><br><span class="line">        thread1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(account);</span><br><span class="line">        thread2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer num = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"是当前的第"</span> + num + <span class="string">"位访客"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized 可以修饰实例方法，也可以修饰静态方法，两者在使用上是有区别的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    SynchronizedTest.test();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是否同步关键看多个线程对象使用的是否是同一个资源，如果是同一个资源（共享），加锁，就会实现同步，如果不是同一个资源，数据不共享，加锁，也不会实现同步。</p><h1 id="线程安全的单例模式"><a href="#线程安全的单例模式" class="headerlink" title="线程安全的单例模式"></a>线程安全的单例模式</h1><p>单例模式是 Java 设计模式中的一种，确保对象只有一份。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建了单例对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多线程场景下，需要使用线程同步来确保单例模式的正确性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建了单例对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建了单例对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//必须是一个唯一的对象</span></span><br><span class="line">        <span class="keyword">synchronized</span> (SingletonDemo<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JMM Java Memory Model</p><p><strong>volatile</strong> 的作用是可以使内存中的数据对线程可见</p><p>分为主内存和工作内存，数据是存在主内存中，要操作数据的时候，首先会将数据从主内存中<strong>复制一份</strong>到工作内存中，在工作内存中来操作该数据。</p><p>主内存中的数据对线程不可见，线程访问的都是副本。</p><p><img src="/2021/01/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/6.png" alt="1611042870649"></p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>死锁是一种互斥状态，多个线程同时执行，并且需要获取多个资源，但是每个线程都不愿意释放自己的资源，都在渴望其他线程释放资源为己所用，导致所有线程全程处于阻塞状态，谁都无法往下运行。</p><p>如何破解死锁？率先有一个线程愿意让出资源，让其他线程先执行，只要有一个线程执行完任务，就会释放它所占用的资源，其他线程的问题迎刃而解。</p><p>死锁演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test.deadlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test.deadlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Data data1 = <span class="keyword">new</span> Data();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Data data2 = <span class="keyword">new</span> Data();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;<span class="comment">//第一个人</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"获取到了data1，等待获取data2"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (data1)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (data2)&#123;<span class="comment">//能拿到两根筷子，可以吃饭</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"用餐完毕！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">2</span>)&#123;<span class="comment">//第二个人</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"获取到了data2，等待获取data1"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (data2)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (data1)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"用餐完毕！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test.deadlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DeadLockRunnable runnable1 = <span class="keyword">new</span> DeadLockRunnable();</span><br><span class="line">        runnable1.num = <span class="number">1</span>;</span><br><span class="line">        DeadLockRunnable runnable2 = <span class="keyword">new</span> DeadLockRunnable();</span><br><span class="line">        runnable2.num = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable1,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable2,<span class="string">"李四"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时发生死锁，进入死循环</p><p><img src="/2021/01/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/7.png" alt="1611044862338"></p><p>想要破解死锁，就需要有人做出牺牲</p><p>例如将进程睡眠两秒，直接释放出一个人所持资源</p><p><img src="/2021/01/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/8.png" alt="1611045172224"></p><p>但要尽量不让多个线程竞争同一资源</p><h1 id="重入锁"><a href="#重入锁" class="headerlink" title="重入锁"></a>重入锁</h1><p><strong>ReentrantLock</strong> 是对 synchronzied 的升级，synchronized 是通过 JVM 实现的（关键字），ReentrantLock 是通过 JDK 实现的（通过 API 操作，调对象的方法）。</p><p>重入锁可以给同一个资源添<strong>加多把锁</strong>，解锁方式也是有区别的。</p><p>synchronized 是自动解锁（当线程执行完任务之后会自动释放锁）</p><p>ReentrantLock 必须<strong>手动释放锁</strong></p><p>lock()和unlock()必须成对出现，上多少把锁就得解多少把锁，也不能多解锁，否则都会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//上锁</span></span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        num++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"是当前的第"</span> + num + <span class="string">"位访客"</span>);</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">        reentrantLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        <span class="keyword">new</span> Thread(account,<span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(account,<span class="string">"李四"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReentrantLock 还具备<strong>限时性</strong>的特点，是指某个线程在一定时间内能否获取到锁</p><p>tryLock(long time,TimeUnit unit) boolean</p><p>//枚举 也是一种类，类的对象值数量是固定，有限的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3s之内要获取锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(lock.tryLock(<span class="number">3</span>, TimeUnit.SECONDS))&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"拿到了锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"没有拿到锁"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(lock.isHeldByCurrentThread())&#123;<span class="comment">//判断当前线程是否拥有该锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TimeLock timeLock = <span class="keyword">new</span> TimeLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(timeLock,<span class="string">"线程1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(timeLock,<span class="string">"线程2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;p&gt;使用多线程可以让程序充分利用 CPU 的资源，提高 CPU 的使用效率，从而解决高并发带来的负载均衡问题。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;1、需要更多的内存空间来支持多线程的运行。&lt;/p&gt;
&lt;p&gt;2、多线程并发访问可能会影响数据的准确性。&lt;/p&gt;
&lt;p&gt;3、数据被多线程共享，可能出现死锁的情况。&lt;/p&gt;
&lt;h2 id=&quot;进程和线程&quot;&gt;&lt;a href=&quot;#进程和线程&quot; class=&quot;headerlink&quot; title=&quot;进程和线程&quot;&gt;&lt;/a&gt;进程和线程&lt;/h2&gt;&lt;p&gt;计算机&lt;strong&gt;正在运行&lt;/strong&gt;的一个独立的应用程序，就是一个进程。&lt;/p&gt;
&lt;p&gt;线程是组成进程的基本单位，一个进程是由一个或多个线程组成的，每个线程都可以完成特定的功能。&lt;/p&gt;
&lt;p&gt;应用程序是静态概念，进程和线程是动态概念，有创建有销毁，存在也是暂时的，不是永久的。&lt;/p&gt;
&lt;p&gt;进程和线程的区别在于运行时是否拥有独立的内存空间，每个进程所占用的内存空间都是独立的。&lt;/p&gt;
&lt;p&gt;但是多个线程是共享内存空间的，执行相互独立。&lt;/p&gt;
&lt;p&gt;线程的执行必须依赖于进程，单独的线程是无法执行的，由进程控制线程的执行。&lt;/p&gt;
&lt;p&gt;多线程是指在一个进程中，多个线程&lt;strong&gt;同时执行&lt;/strong&gt;，这里的同时执行并不是真正意义上的同时执行，而是交替执行，系统资源按照时间段分别分配给不同的线程，多个线程是交替执行的，但是因为执行速度太快，感觉是同时执行的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>异常</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E5%BC%82%E5%B8%B8/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E5%BC%82%E5%B8%B8/</id>
    <published>2021-01-19T07:17:08.000Z</published>
    <updated>2021-01-19T07:26:16.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="什么是异常？"><a href="#什么是异常？" class="headerlink" title="什么是异常？"></a>什么是异常？</h2><p>Java 中的错误大致分为两类：</p><p>1、<strong>编译时错误</strong>，语法错误</p><p>2、<strong>运行时错误</strong>，语法正确，逻辑错误</p><p>Java 中有一组类专门描述各种不同的运行时错误，叫做异常类，实例化对象就是各种异常对象。</p><p>1、程序出现错误时，会自动创建一个包含错误信息的异常对象。</p><p>2、将异常对象提交给系统。</p><p>3、由系统转交给能够处理这个异常的代码进行处理。</p><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p>本质上分为两大类：</p><p>1、Error：指系统错误，由JVM生成，无法处理。</p><p>2、Exception：程序运行期间出现的错误，可以处理。</p><a id="more"></a><h2 id="异常的使用"><a href="#异常的使用" class="headerlink" title="异常的使用"></a>异常的使用</h2><p>try-catch</p><p>try（尝试运行） 包裹可能出现异常的代码，一旦出现异常，自动创建一个异常对象，交给系统，系统要分配下去，找到可以处理的代码进行处理。</p><p>catch（捕获异常）捕获系统抛出的异常，进行处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F;可能抛出异常的代码</span><br><span class="line">&#125;catch(Exception exception)&#123;</span><br><span class="line">&#x2F;&#x2F;处理异常</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论程序是否抛出异常，finally 代码块中的代码一定会执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F;可能抛出异常的代码</span><br><span class="line">&#125;catch(Exception exception)&#123;</span><br><span class="line">&#x2F;&#x2F;处理异常</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">&#x2F;&#x2F;一定要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"try..."</span>);</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"finally..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h2><p>异常类的最顶端是 Throwable</p><p>Throwable 有两个直接子类：Error 和 Exception</p><p>Throwable、Error、Exception 三个类都存在于 java.lang 包中。</p><p>Error 常见的子类：VMError、AWTError、IOError。</p><p>VMError 常见子类：StackOverflowError、OutOfMemoryError。</p><p>Exception 常见子类：IOException 和 RuntimeException</p><p>IOException 的常见子类：FileLockInterruptionException、FileNotFoundException。</p><p>RuntimeException 的常见子类：</p><p>ArithmeticException 数学异常</p><p>ClassNotFoundException 类未定义异常</p><p>IllelgalArgumentException 参数格式异常</p><p>ArrayIndexOutOfBoundsException 数组下标越界异常</p><p>NullPointerException 空指针异常</p><p>NoSuchMethodException 方法未定义异常</p><p>NumberFormatException 将其他类型转为数字时报错，格式错误</p><p><img src="/2021/01/19/%E5%BC%82%E5%B8%B8/1.png" alt="1611040744372"></p><h2 id="throw-和-throws-的区别"><a href="#throw-和-throws-的区别" class="headerlink" title="throw 和 throws 的区别"></a>throw 和 throws 的区别</h2><p>都是 Java 处理异常时的关键字，都跟抛出异常有关系。</p><p>throws 是用来修饰方法的，表示该方法可能会抛出某个异常，告诉调用者使用的时候需要注意。</p><p><img src="/2021/01/19/%E5%BC%82%E5%B8%B8/2.png" alt="1611040797254"></p><p>throw 是抛出异常对象具体实现代码。</p><p><img src="/2021/01/19/%E5%BC%82%E5%B8%B8/3.png" alt="1611040817783"></p><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>++，参数必须是整数，不是整数就抛出异常（自定义异常）</p><p><img src="/2021/01/19/%E5%BC%82%E5%B8%B8/4.png" alt="1611041073624"></p><p>如果异常的父类是 RuntimeException，那么使用该异常的时候，可以不进行处理，叫做不检查异常。</p><p>如果异常的父类是 Exception，则该异常是受检查异常，使用该异常的时候，需要进行处理（1、try-catch自己解决，2、再次抛出 throws）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNumberException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyNumberException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xzs.exception.MyNumberException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(add(<span class="keyword">new</span> Object()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Object object)</span> <span class="keyword">throws</span> MyNumberException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(object <span class="keyword">instanceof</span> Integer)&#123;</span><br><span class="line">            Integer num = (Integer)object;</span><br><span class="line">            <span class="keyword">return</span> ++num;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyNumberException(<span class="string">"操作数类型不是整数！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h1&gt;&lt;h2 id=&quot;什么是异常？&quot;&gt;&lt;a href=&quot;#什么是异常？&quot; class=&quot;headerlink&quot; title=&quot;什么是异常？&quot;&gt;&lt;/a&gt;什么是异常？&lt;/h2&gt;&lt;p&gt;Java 中的错误大致分为两类：&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;编译时错误&lt;/strong&gt;，语法错误&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;运行时错误&lt;/strong&gt;，语法正确，逻辑错误&lt;/p&gt;
&lt;p&gt;Java 中有一组类专门描述各种不同的运行时错误，叫做异常类，实例化对象就是各种异常对象。&lt;/p&gt;
&lt;p&gt;1、程序出现错误时，会自动创建一个包含错误信息的异常对象。&lt;/p&gt;
&lt;p&gt;2、将异常对象提交给系统。&lt;/p&gt;
&lt;p&gt;3、由系统转交给能够处理这个异常的代码进行处理。&lt;/p&gt;
&lt;h2 id=&quot;异常分类&quot;&gt;&lt;a href=&quot;#异常分类&quot; class=&quot;headerlink&quot; title=&quot;异常分类&quot;&gt;&lt;/a&gt;异常分类&lt;/h2&gt;&lt;p&gt;本质上分为两大类：&lt;/p&gt;
&lt;p&gt;1、Error：指系统错误，由JVM生成，无法处理。&lt;/p&gt;
&lt;p&gt;2、Exception：程序运行期间出现的错误，可以处理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>接口</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E6%8E%A5%E5%8F%A3/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-01-19T07:11:01.000Z</published>
    <updated>2021-01-19T07:16:36.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是由抽象类衍生出来的概念，抽象类是指类中至少存在一个抽象方法，抽象类是由抽象方法和非抽象方法组成的。</p><p>接口就是<strong>极度抽象的抽象类</strong>，类中所有方法都是抽象方法，没有非抽象方法。</p><p>接口主要用来实现解耦合。</p><p>面向接口编程的优点：</p><p>1、能够最大限度的解耦合，降低程序的耦合度。</p><p>2、使程序易于扩展。</p><p>3、有利于程序的后期维护。</p><h2 id="如何使用接口"><a href="#如何使用接口" class="headerlink" title="如何使用接口"></a>如何使用接口</h2><p>接口在 Java 中是独立存在的一种结构，和类相似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface 接口名&#123;</span><br><span class="line">方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>接口中的方法全部都是抽象方法，同时接口中允许存在成员变量，有要求：</p><p>1、不能定义 private 和 protected 修饰的成员变量，只能定义 public 和默认成员变量。</p><p>2、接口中的成员变量在定义时必须初始化。</p><p>3、接口中的成员变量都是静态常量，可以通过接口之间访问，同时值不能修改。</p><p>使用接口，需要有实现类，实现类来实现接口中的抽象方法，把抽象的内容具体化。</p><p>1、用普通Java类实现接口，重写（实现）接口中的抽象方法。</p><p>2、如果实现类不希望重写方法，将实现类定义成抽象类即可。</p><p>3、接口不能实现接口。</p><p>4、接口可以继承接口。</p><p>接口其实是对继承的一种扩展，都是多态的体现。</p><p>扩展什么呢？</p><p>继承的原则是单继承，一个类只能有一个父类，但是接口是没有这个限制，一个实现类可以同时实现多个接口。</p><h2 id="面向接口编程的实际应用"><a href="#面向接口编程的实际应用" class="headerlink" title="面向接口编程的实际应用"></a>面向接口编程的实际应用</h2><p>面向对象编程 OOP 是一种思想，面向接口编程是一种具体的开发方式。</p><p>工厂生产产品A，需要用设备A来生产</p><p>Factory、EquipmentA</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.com.xzs.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EquipmentA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"设备A运行，生产产品A..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.com.xzs.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EquipmentA equipmentA;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EquipmentA <span class="title">getEquipmentA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> equipmentA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentA</span><span class="params">(EquipmentA equipmentA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.equipmentA = equipmentA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始生产..."</span>);</span><br><span class="line">        <span class="keyword">this</span>.equipmentA.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.com.xzs.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EquipmentA equipmentA = <span class="keyword">new</span> EquipmentA();</span><br><span class="line">        Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line">        factory.setEquipmentA(equipmentA);</span><br><span class="line">        factory.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂接了新订单，生产产品B，必须由设备B来生产，工厂中只能有一台设备。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.com.xzs.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Equiment</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.com.xzs.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Equiment equiment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Equiment <span class="title">getEquiment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> equiment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquiment</span><span class="params">(Equiment equiment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.equiment = equiment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始生产..."</span>);</span><br><span class="line">        <span class="keyword">this</span>.equiment.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.com.xzs.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EquipmentA equipmentA = <span class="keyword">new</span> EquipmentA();</span><br><span class="line">        EquipmentB equipmentB = <span class="keyword">new</span> EquipmentB();</span><br><span class="line">        EquipmentC equipmentC = <span class="keyword">new</span> EquipmentC();</span><br><span class="line">        Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line">        factory.setEquiment(equipmentC);</span><br><span class="line">        factory.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;p&gt;接口是由抽象类衍生出来的概念，抽象类是指类中至少存在一个抽象方法，抽象类是由抽象方法和非抽象方法组成的。&lt;/p&gt;
&lt;p&gt;接口就是&lt;strong&gt;极度抽象的抽象类&lt;/strong&gt;，类中所有方法都是抽象方法，没有非抽象方法。&lt;/p&gt;
&lt;p&gt;接口主要用来实现解耦合。&lt;/p&gt;
&lt;p&gt;面向接口编程的优点：&lt;/p&gt;
&lt;p&gt;1、能够最大限度的解耦合，降低程序的耦合度。&lt;/p&gt;
&lt;p&gt;2、使程序易于扩展。&lt;/p&gt;
&lt;p&gt;3、有利于程序的后期维护。&lt;/p&gt;
&lt;h2 id=&quot;如何使用接口&quot;&gt;&lt;a href=&quot;#如何使用接口&quot; class=&quot;headerlink&quot; title=&quot;如何使用接口&quot;&gt;&lt;/a&gt;如何使用接口&lt;/h2&gt;&lt;p&gt;接口在 Java 中是独立存在的一种结构，和类相似。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface 接口名&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	方法;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Object、包装类</title>
    <link href="https://xzso3o.github.io/2021/01/19/Object%E3%80%81%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>https://xzso3o.github.io/2021/01/19/Object%E3%80%81%E5%8C%85%E8%A3%85%E7%B1%BB/</id>
    <published>2021-01-19T06:47:58.000Z</published>
    <updated>2021-01-19T12:03:36.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p>Java 类分三种：</p><p>1、JDK 提供的官方类库</p><p>2、第三方提供的类库（工具、框架）</p><p>3、开发自定义的类</p><p>Object 是 JDK 中的一个类，java.lang 包中，该类是所有类的直接父类或间接父类。</p><p>Java 程序中的每个类都是 Object 的后代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        hashCode();</span><br><span class="line">        getClass();</span><br><span class="line">        equals(<span class="keyword">null</span>);</span><br><span class="line">        clone();</span><br><span class="line">        toString();</span><br><span class="line">        notify();</span><br><span class="line">        notifyAll();</span><br><span class="line">        wait();</span><br><span class="line">        wait(<span class="number">100L</span>);</span><br><span class="line">        wait(<span class="number">100L</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="重写-Object-类的方法"><a href="#重写-Object-类的方法" class="headerlink" title="重写 Object 类的方法"></a>重写 Object 类的方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public String toString()</td><td>以字符串的形式返回对象的信息</td></tr><tr><td>public boolean equals(Object obj)</td><td>判断两个对象是否相等</td></tr><tr><td>public native int hashCode()</td><td>返回对象的hash值</td></tr></tbody></table><p><strong>== 比较的永远是变量的值</strong></p><p>变量的值就是变量中存储的数据</p><p>hashCode 方法用来获取对象的<strong>散列值</strong>，散列值是根据对象的内存地址和对象的信息映射出来的一个数值。</p><p>任何两个对象的内存地址肯定不一样，但是实际开发中如果两个对象的属性值完全一致，就认为是同一个对象，那么它们的散列值也是相等的。</p><p>eqauls 方法用来判断两个对象是否相等，hashCode 方法是返回对象的哈希值，实际开发中真正判断两个对象是否相等，需要结合 eqauls 和 hashCode 方法一同来判断。</p><p>为什么？为了提高效率。</p><p>判断两个对象是否相等</p><p>1、先判断两个对象的 hashCode 是否相等，如果不相等，则两个对象一定不是同一个对象，但是如果相等，则不能确定两个对象一定相等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2*6 &#x3D; 3*4</span><br></pre></td></tr></table></figure><p>2、再通过 equals 方法进行进一步的判断，最终得出两个对象是否相等的结论。</p><p>hashCode 执行效率高于 equals，优先使用 hashCode 进行判断，如果 hashCode 能确定结果，则不需要执行效率低的 equals，除非 hashCode 无法确定结果，不得不执行 equals 的时候再去执行 equals 得出结果。</p><p>表达式1 &amp; 表达式2 两个表达式都要执行</p><p>表达式1 &amp;&amp; 表达式2 表达式1 = false，表达式2 就不需要执行了，从而提升效率</p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>包装类是 Java 提供的一组类，专门用来创建基本数据类型对应的对象，一共有 8 个，都保存在 java.lang 包中。</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p>包装类的体系结构</p><p><img src="/2021/01/19/Object%E3%80%81%E5%8C%85%E8%A3%85%E7%B1%BB/1.png" alt="1611038838235"></p><h2 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h2><p>装箱：基本数据类型 —&gt; 包装类</p><p>public Type(type value) </p><p>public Type(String value)</p><p>以上两个方法不推荐使用</p><p>public static valueOf(type value) 静态工厂方法</p><p>静态工厂方法是专门用来创建对象的一个静态方法，功能上与构造器一样，都是用来创建对象的。</p><p>获取一个类的实例化对象，有两条路可以选择</p><p>1、构造器</p><p>2、静态工厂方法</p><p>区别：</p><p>1、静态工厂方法可以有自定义的名字。</p><p>2、静态工厂方法在需要的情况下可以保证单例模式。</p><p>拆箱：包装类 —&gt; 基本数据类型</p><p>*Value()</p><p>parse*(String value)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Object&quot;&gt;&lt;a href=&quot;#Object&quot; class=&quot;headerlink&quot; title=&quot;Object&quot;&gt;&lt;/a&gt;Object&lt;/h1&gt;&lt;p&gt;Java 类分三种：&lt;/p&gt;
&lt;p&gt;1、JDK 提供的官方类库&lt;/p&gt;
&lt;p&gt;2、第三方提供的类库（工具、框架）&lt;/p&gt;
&lt;p&gt;3、开发自定义的类&lt;/p&gt;
&lt;p&gt;Object 是 JDK 中的一个类，java.lang 包中，该类是所有类的直接父类或间接父类。&lt;/p&gt;
&lt;p&gt;Java 程序中的每个类都是 Object 的后代。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.java.test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hashCode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        equals(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clone();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        notify();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        notifyAll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait(&lt;span class=&quot;number&quot;&gt;100L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait(&lt;span class=&quot;number&quot;&gt;100L&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>注解、多态的使用、 抽象方法和抽象类</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E6%B3%A8%E8%A7%A3%E3%80%81%E5%A4%9A%E6%80%81%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%81-%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E6%B3%A8%E8%A7%A3%E3%80%81%E5%A4%9A%E6%80%81%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%81-%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/</id>
    <published>2021-01-19T06:39:41.000Z</published>
    <updated>2021-01-19T06:47:24.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>@Override 它告诉编译器这个方法是用来覆盖父类方法的。</p><p>@WebServlet Java Web 开发中表示某个类是一个 Servlet，Web 容器就会识别该类，从而加载运行该类，替代传统的 XML 开发，让程序开发更简洁。</p><p>注解和注释</p><p>注释完全不影响程序的运行，注解会影响程序的运行。</p><p>注释是给开发者看的，注解是给程序看的，编译器、框架、Web 容器。</p><p><strong>元注解</strong>：用来描述注解的注解，JDK 提供默认的注解，用这些默认注解帮助</p><p>开发者自定义需要的注解。</p><p>@Target 指定该注解使用的地方（类/方法）</p><ul><li><p>ElementType.TYPE   给类/接口使用</p></li><li><p>ElementType.METHOD 给方法使用</p></li><li><p>ElementType.FIELD 给属性使用</p></li><li><p>ElementType.PARAMETER 给方法参数使用</p></li></ul><p>@Retention 指定注解的保留域</p><ul><li><p>RetentionPolicy.SOURCE    编译器处理，处理之后就不再保留</p></li><li><p>RetentionPolicy.CLASS    class文件处理，类对应的class文件</p></li><li><p>RetentionPolicy.RUNTIME    JVM 读取，程序运行时使用</p></li></ul><a id="more"></a><p>自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InitMethod &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解的解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取使用了注解的目标类</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.java.servlet.InitDemo"</span>);</span><br><span class="line">        <span class="comment">//检查目标类中哪些方法使用注解</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">if</span>(methods!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">               <span class="keyword">boolean</span> isInitMethod = method.isAnnotationPresent(InitMethod<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">               <span class="keyword">if</span>(isInitMethod)&#123;</span><br><span class="line">                   System.out.println(method.getName() + <span class="string">"使用了InitMethod注解"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>一个事物可以有多种表现形态，一个类本质是抽象的，实际使用的时候可以有多种不同的表现形态。</p><p>Java 程序中，定义一个抽象的方法，只有方法的声明，但是没有实现。在具体的生成环境中根据不同的需求呈现出不同的业务逻辑，很灵活，扩展性更好，实现了解耦合。</p><h1 id="多态的使用"><a href="#多态的使用" class="headerlink" title="多态的使用"></a>多态的使用</h1><p><strong>父类引用指向子类对象</strong>，就是多态的一种表现形式。</p><p>多态主要有两种表现形式：</p><p>1、方法定义时，形参为父类，调用方法时传入的参数是子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">settlement</span><span class="params">(Member member)</span></span>&#123;</span><br><span class="line">    member.buyBook();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OrdinaryMember ordinaryMember = <span class="keyword">new</span> OrdinaryMember();</span><br><span class="line">cashier.settlement(ordinaryMember);</span><br></pre></td></tr></table></figure><p>2、方法定义时，返回值为父类，调用方法时返回的是子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">getMember</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"ordinaryMember"</span>.equals(name))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrdinaryMember();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"superMember"</span>.equals(name))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SuperMember();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"参数有误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(cashier.getMember(<span class="string">"ordinaryMember"</span>));</span><br><span class="line">System.out.println(cashier.getMember(<span class="string">"superMember"</span>));</span><br></pre></td></tr></table></figure><p>父子类之间的类型转换分为两种：向上转型、向下转型</p><p>向上转型就是将子类对象转为父类类型，自动完成类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Member member = <span class="keyword">new</span> OrdinaryMember();</span><br></pre></td></tr></table></figure><p>向下转型就是将父类对象转为子类类型，无法完成自动转型，需要手动进行强制转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OrdinaryMember ordinaryMember = (OrdinaryMember) <span class="keyword">new</span> Member();</span><br></pre></td></tr></table></figure><p>父类动物 子类猫</p><p>猫是动物 </p><p>动物是猫</p><h1 id="抽象方法和抽象类"><a href="#抽象方法和抽象类" class="headerlink" title="抽象方法和抽象类"></a>抽象方法和抽象类</h1><p>抽象方法：一个方法只有定义，没有具体实现。</p><p>抽象类：一个类中一旦出现抽象方法，该类就必须被定义抽象类。</p><p>为什么要有抽象方法？</p><p>多态的一种应用，多态场景下，需要定义一个父类，对父类进行编程，具体的实现交给子类完成，子类就需要对父类方法进行重写，也就是说父类方法无论怎么定义，最终都会被子类覆盖，那么父类的方法就不需要定义了，所以就需要将该方法定义为抽象的。</p><p>为什么一旦有了抽象方法，类就必须是抽象的？</p><p>抽象方法只是一种声明，没有具体实现，意味着方法所在的类不能被实例化，因为一旦实例化该类，意味着可以直接调用方法，但是方法是没有实现，所以不能调用。</p><p><strong>抽象方法所在的类不能被实例化</strong></p><p>将类定义成抽象类，抽象类的特点是不能被实例化。</p><p>抽象类/抽象方法如何使用</p><p>通过继承来实现多态，定义一个子类，继承抽象类，子类中实现抽象方法，写程序的时候操作子类即可。</p><p>如果子类也不想实现抽象方法，只需要将子类也定义成抽象类即可，相当于将实现抽象方法的任务再交给它的子类了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h1&gt;&lt;p&gt;@Override 它告诉编译器这个方法是用来覆盖父类方法的。&lt;/p&gt;
&lt;p&gt;@WebServlet Java Web 开发中表示某个类是一个 Servlet，Web 容器就会识别该类，从而加载运行该类，替代传统的 XML 开发，让程序开发更简洁。&lt;/p&gt;
&lt;p&gt;注解和注释&lt;/p&gt;
&lt;p&gt;注释完全不影响程序的运行，注解会影响程序的运行。&lt;/p&gt;
&lt;p&gt;注释是给开发者看的，注解是给程序看的，编译器、框架、Web 容器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;元注解&lt;/strong&gt;：用来描述注解的注解，JDK 提供默认的注解，用这些默认注解帮助&lt;/p&gt;
&lt;p&gt;开发者自定义需要的注解。&lt;/p&gt;
&lt;p&gt;@Target 指定该注解使用的地方（类/方法）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ElementType.TYPE   给类/接口使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ElementType.METHOD 给方法使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ElementType.FIELD 给属性使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ElementType.PARAMETER 给方法参数使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@Retention 指定注解的保留域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RetentionPolicy.SOURCE    编译器处理，处理之后就不再保留&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RetentionPolicy.CLASS    class文件处理，类对应的class文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RetentionPolicy.RUNTIME    JVM 读取，程序运行时使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>子类访问权限、方法重写和重载</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E5%AD%90%E7%B1%BB%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E3%80%81%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E5%AD%90%E7%B1%BB%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E3%80%81%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD/</id>
    <published>2021-01-19T06:21:40.000Z</published>
    <updated>2021-01-19T06:26:02.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子类访问权限"><a href="#子类访问权限" class="headerlink" title="子类访问权限"></a>子类访问权限</h1><p>子类可以通过 super 关键字访问父类中的资源，但并不是所有的父类资源都可以被子类访问。</p><p>访问权限修饰符</p><p>public、private、protected、缺省默认（不写）</p><table><thead><tr><th></th><th>同一个类</th><th>同一个包中</th><th>不同包</th><th>子类（同包）</th><th>子类（不同包）</th></tr></thead><tbody><tr><td>public</td><td>可以访问</td><td>可以访问</td><td>可以访问</td><td>可以访问</td><td>可以访问</td></tr><tr><td>protected</td><td>可以访问</td><td>可以访问</td><td>不可以访问</td><td>可以访问，super可以访问</td><td>不可以访问，super可以访问</td></tr><tr><td>缺省默认</td><td>可以访问</td><td>可以访问</td><td>不可以访问</td><td>可以访问，super可以访问</td><td>不可以访问，super不可以访问</td></tr><tr><td>private</td><td>可以访问</td><td>不可以访问</td><td>不可以访问</td><td>不可以访问</td><td>不可以访问</td></tr></tbody></table><p>包（package）是 Java 管理文件的一种方式，一个工程可能会出现重名的类，通过包来解决冲突问题。</p><p>包的命名方式一般采用公司/组织的倒置域名</p><p>default 关键字是用来表示接口中的默认方法的，和访问权限修饰符的缺省默认值没有关系。</p><a id="more"></a><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><p>子类在继承父类方法的基础上，对父类方法重新定义并覆盖的操作叫做方法重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"输出人员信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.java.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是一个学生"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法不能被重写，构造方法不能被继承。</p><p>方法重写的规则：</p><p>1、父子类的方法名必须相同。</p><p>2、父子类的方法参数列表必须相同。</p><p>3、子类方法返回值与父类方法返回值相同，或者是其子类。</p><p>4、子类方法的访问权限不能小于父类，至少和父类一样，或者大于父类。</p><p>public &gt; protected &gt; 默认 &gt; private</p><p>父类 public，子类 public</p><p>父类 protected，子类 public、protected</p><p>父类默认，子类 public、protected、默认</p><p>父类 private，子类无法重写父类的方法，<strong>重写需要建立在继承的基础上</strong>，必须先有继承，才能有重写，父类的 private 修饰的方法是无法被子类继承的，所以无法重写。</p><h2 id="方法重写和方法重载"><a href="#方法重写和方法重载" class="headerlink" title="方法重写和方法重载"></a>方法重写和方法重载</h2><table><thead><tr><th></th><th>所在位置</th><th>方法名</th><th>参数列表</th><th>返回值</th><th>访问权限</th></tr></thead><tbody><tr><td>方法重写</td><td>子类重写父类方法</td><td>相同</td><td>相同</td><td>相同或是其子类</td><td>不能小于父类</td></tr><tr><td>方法重载</td><td>同一个类中</td><td>相同</td><td>不相同</td><td>没有要求</td><td>没有要求</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;子类访问权限&quot;&gt;&lt;a href=&quot;#子类访问权限&quot; class=&quot;headerlink&quot; title=&quot;子类访问权限&quot;&gt;&lt;/a&gt;子类访问权限&lt;/h1&gt;&lt;p&gt;子类可以通过 super 关键字访问父类中的资源，但并不是所有的父类资源都可以被子类访问。&lt;/p&gt;
&lt;p&gt;访问权限修饰符&lt;/p&gt;
&lt;p&gt;public、private、protected、缺省默认（不写）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;同一个类&lt;/th&gt;
&lt;th&gt;同一个包中&lt;/th&gt;
&lt;th&gt;不同包&lt;/th&gt;
&lt;th&gt;子类（同包）&lt;/th&gt;
&lt;th&gt;子类（不同包）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;可以访问&lt;/td&gt;
&lt;td&gt;可以访问&lt;/td&gt;
&lt;td&gt;可以访问&lt;/td&gt;
&lt;td&gt;可以访问&lt;/td&gt;
&lt;td&gt;可以访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;可以访问&lt;/td&gt;
&lt;td&gt;可以访问&lt;/td&gt;
&lt;td&gt;不可以访问&lt;/td&gt;
&lt;td&gt;可以访问，super可以访问&lt;/td&gt;
&lt;td&gt;不可以访问，super可以访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;缺省默认&lt;/td&gt;
&lt;td&gt;可以访问&lt;/td&gt;
&lt;td&gt;可以访问&lt;/td&gt;
&lt;td&gt;不可以访问&lt;/td&gt;
&lt;td&gt;可以访问，super可以访问&lt;/td&gt;
&lt;td&gt;不可以访问，super不可以访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;可以访问&lt;/td&gt;
&lt;td&gt;不可以访问&lt;/td&gt;
&lt;td&gt;不可以访问&lt;/td&gt;
&lt;td&gt;不可以访问&lt;/td&gt;
&lt;td&gt;不可以访问&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;包（package）是 Java 管理文件的一种方式，一个工程可能会出现重名的类，通过包来解决冲突问题。&lt;/p&gt;
&lt;p&gt;包的命名方式一般采用公司/组织的倒置域名&lt;/p&gt;
&lt;p&gt;default 关键字是用来表示接口中的默认方法的，和访问权限修饰符的缺省默认值没有关系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>继承、内部类</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E7%BB%A7%E6%89%BF%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E7%BB%A7%E6%89%BF%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2021-01-19T06:18:38.000Z</published>
    <updated>2021-01-19T06:20:28.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>描述类和类之间的一种关系，是 Java 实现代码重用/复用的重要机制。</p><p>被继承的类叫做父类 / 超类，继承父类的类叫做子类 / 派生类。</p><p>子类可以继承父类中的公有资源（成员变量和成员方法），父类的私有信息，子类无法继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="comment">//信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"><span class="comment">//继承父类的公有信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子类访问父类"><a href="#子类访问父类" class="headerlink" title="子类访问父类"></a>子类访问父类</h2><p>只要两个类实现了继承关系，那么在创建子类对象的时候，一定会先创建父类对象。</p><p>无论子类对象是通过有参构造还是无参构造来创建，父类默认都是用无参构造创建。</p><p>每个类只能有一个直接父类，但是可以有多个间接父类。</p><p>可以通过手动修改的方式让父类调用自己的有参构造。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"Student no args constructor execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"Student args constructor execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>super 关键字表示在子类中访问父类的信息，跟 this 形成对比，this 关键字表示在类中访问本体的信息。</p><p>this()/this(…)   super()/super(…) 必须写在调用方法的第一行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(str + <span class="string">" object created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Stub parentStaticObject = <span class="keyword">new</span> Stub(<span class="string">"parent static object"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"parent static code execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"parent code execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stub parentObject = <span class="keyword">new</span> Stub(<span class="string">"parent object"</span>);</span><br><span class="line"></span><br><span class="line">    Stub stub;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"parent constructor execute"</span>);</span><br><span class="line">        stub = <span class="keyword">new</span> Stub(<span class="string">"parent constructor create object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Stub childStaticObject = <span class="keyword">new</span> Stub(<span class="string">"child static object"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"child static code execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"child code execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stub childObject = <span class="keyword">new</span> Stub(<span class="string">"child object"</span>);</span><br><span class="line"></span><br><span class="line">    Stub stub;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"child constructor execute"</span>);</span><br><span class="line">        stub = <span class="keyword">new</span> Stub(<span class="string">"child constructor create object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child child = <span class="keyword">new</span> Child();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">parent static object object created</span><br><span class="line">parent static code execute</span><br><span class="line">child static object object created</span><br><span class="line">child static code execute</span><br><span class="line">parent code execute</span><br><span class="line">parent object object created</span><br><span class="line">parent constructor execute</span><br><span class="line">parent constructor create object object created</span><br><span class="line">child code execute</span><br><span class="line">child object object created</span><br><span class="line">child constructor execute</span><br><span class="line">child constructor create object object created</span><br></pre></td></tr></table></figure><p>new 一个类，加载这个类，（静态成员变量，静态代码块）</p><p>创建对象，（成员变量，代码块）-&gt; 构造器</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>是指一个类是另外一个类的内部成员，定义在某个类的内部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outerName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OuterClass display"</span>);</span><br><span class="line">        System.out.println(outerName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String innerName;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InnerClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">            innerName = <span class="string">"inner class"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"InnerClass display"</span>);</span><br><span class="line">            System.out.println(innerName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OuterClass outerClass = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        outerClass.display();</span><br><span class="line">        InnerClass innerClass = outerClass.<span class="keyword">new</span> InnerClass();</span><br><span class="line">        innerClass.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>内部类对象的创建必须要依赖于外部类的实例化对象</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h1&gt;&lt;p&gt;描述类和类之间的一种关系，是 Java 实现代码重用/复用的重要机制。&lt;/p&gt;
&lt;p&gt;被继承的类叫做父类 / 超类，继承父类的类叫做子类 / 派生类。&lt;/p&gt;
&lt;p&gt;子类可以继承父类中的公有资源（成员变量和成员方法），父类的私有信息，子类无法继承。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;People&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;People&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//继承父类的公有信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;子类访问父类&quot;&gt;&lt;a href=&quot;#子类访问父类&quot; class=&quot;headerlink&quot; title=&quot;子类访问父类&quot;&gt;&lt;/a&gt;子类访问父类&lt;/h2&gt;&lt;p&gt;只要两个类实现了继承关系，那么在创建子类对象的时候，一定会先创建父类对象。&lt;/p&gt;
&lt;p&gt;无论子类对象是通过有参构造还是无参构造来创建，父类默认都是用无参构造创建。&lt;/p&gt;
&lt;p&gt;每个类只能有一个直接父类，但是可以有多个间接父类。&lt;/p&gt;
&lt;p&gt;可以通过手动修改的方式让父类调用自己的有参构造。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>封装、static关键字</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E5%B0%81%E8%A3%85%E3%80%81static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E5%B0%81%E8%A3%85%E3%80%81static%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2021-01-19T06:02:15.000Z</published>
    <updated>2021-01-19T06:10:37.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象三大特征：封装、继承、多态"><a href="#面向对象三大特征：封装、继承、多态" class="headerlink" title="面向对象三大特征：封装、继承、多态"></a>面向对象三大特征：封装、继承、多态</h1><h2 id="什么是封装？"><a href="#什么是封装？" class="headerlink" title="什么是封装？"></a>什么是封装？</h2><p>类中的属性外部可以没有任何限制的随时访问和修改，造成数据的不安全。</p><p>为了避免这种情况，所以我们应该将类中的信息全部封装起来，让外部不能直接访问，而是有限制条件的进行访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让外部修改值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"传入了非法的数据，已启用默认值0"</span>);</span><br><span class="line">            <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤：</p><p>1、将成员变量（属性）私有化（private）修饰。</p><p>2、提供公有的 setter/getter 方法。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使类和成员的可访问性最小化</p><p>组件</p><p>API Application Interface 应用程序接口</p><p>组件化搭配 将功能模块拆分成一个个组件，再把这些组件整合到一起，共同实现业务功能，组件怎么称呼 API</p><p>封装可以将 API 和具体实现进行隔离</p><p>接口，抽象类，类中的方法都是抽象没有具体实现，只提供概念，需要具体的实现类来完成抽象的实现。</p><p>组件之间只需要通过 API 进行通信即可，不同的组件完全不需要知道其他组件的具体实现。</p><p>解耦合</p><p>低耦合 高内聚</p><h1 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h1><p>static 表示静态或者全局，可以用来修饰成员变量或者成员方法或者代码块，</p><p>非 static 修饰的方法要调用，必须依赖于某个具体的实例化对象，而 static 修饰的方法不需要依赖于任何一个对象，属于类的信息，同时被该类所有的实例化对象所共享，所以是全局概念。</p><p>用 static 修饰的成员变量，多个对象共用，内存中只有一份，没有被 static 修饰的成员变量叫做实例变量，一个对象对应一个，内存中有多份。</p><p><img src="/2021/01/19/%E5%B0%81%E8%A3%85%E3%80%81static%E5%85%B3%E9%94%AE%E5%AD%97/1.png" alt="1611036038080"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test2 test2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            test2 = <span class="keyword">new</span> Test2();</span><br><span class="line">            test2.id++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(test2.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>static 修饰成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是一个User对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>static 修饰代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"123"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态代码块的特点是只执行一次，当类被加载到 JVM 内存中的时候去执行。</p><p>静态代码块只执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        num++;</span><br><span class="line">        System.out.println(<span class="string">"执行了静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是一个User对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        User user3 = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(user1.num);</span><br><span class="line">        System.out.println(user2.num);</span><br><span class="line">        System.out.println(user3.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"static code execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"main() execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/19/%E5%B0%81%E8%A3%85%E3%80%81static%E5%85%B3%E9%94%AE%E5%AD%97/2.png" alt="1611036066885"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"static code execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"main() execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/19/%E5%B0%81%E8%A3%85%E3%80%81static%E5%85%B3%E9%94%AE%E5%AD%97/3.png" alt="1611036080142"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"static code execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"main() execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/19/%E5%B0%81%E8%A3%85%E3%80%81static%E5%85%B3%E9%94%AE%E5%AD%97/4.png" alt="1611036091484"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"code execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Test3 test3 = <span class="keyword">new</span> Test3();</span><br><span class="line">        System.out.println(<span class="string">"main() execute"</span>);</span><br><span class="line">        Test3 test2 = <span class="keyword">new</span> Test3();</span><br><span class="line">        Test3 test1 = <span class="keyword">new</span> Test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/19/%E5%B0%81%E8%A3%85%E3%80%81static%E5%85%B3%E9%94%AE%E5%AD%97/5.png" alt="1611036103674"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象三大特征：封装、继承、多态&quot;&gt;&lt;a href=&quot;#面向对象三大特征：封装、继承、多态&quot; class=&quot;headerlink&quot; title=&quot;面向对象三大特征：封装、继承、多态&quot;&gt;&lt;/a&gt;面向对象三大特征：封装、继承、多态&lt;/h1&gt;&lt;h2 id=&quot;什么是封装？&quot;&gt;&lt;a href=&quot;#什么是封装？&quot; class=&quot;headerlink&quot; title=&quot;什么是封装？&quot;&gt;&lt;/a&gt;什么是封装？&lt;/h2&gt;&lt;p&gt;类中的属性外部可以没有任何限制的随时访问和修改，造成数据的不安全。&lt;/p&gt;
&lt;p&gt;为了避免这种情况，所以我们应该将类中的信息全部封装起来，让外部不能直接访问，而是有限制条件的进行访问。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//让外部修改值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(age &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.err.println(&lt;span class=&quot;string&quot;&gt;&quot;传入了非法的数据，已启用默认值0&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;User&amp;#123;&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;id=&quot;&lt;/span&gt; + id +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;, name=&#39;&quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&#39;\&#39;&#39;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;, age=&quot;&lt;/span&gt; + age +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;&amp;#125;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;1、将成员变量（属性）私有化（private）修饰。&lt;/p&gt;
&lt;p&gt;2、提供公有的 setter/getter 方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>构造函数、方法重载、成员变量和局部变量</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</id>
    <published>2021-01-19T05:55:24.000Z</published>
    <updated>2021-01-19T05:56:46.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>定义类的目的是为了创建对象，对象是 Java 的核心，面向对象编程语言。</p><p>如何通过类创建对象？</p><p>通过构造函数/构造方法/构造器创建对象。</p><p>构造函数其实是一种特殊的方法：</p><p>1、方法名必须是类名</p><p>2、不需要定义返回值类型</p><p>构造方法可以分为两类：无参构造和有参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个类都拥有一个默认的无参构造函数，不需要开发者手动定义。</p><p>但是如果手动定义一个有参构造，则默认的无参构造会被覆盖掉，导致对象无法创建。</p><p>User@b4c966a</p><p>表示对象的信息 类@内存地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String toString() &#123;</span><br><span class="line">    return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h1><p>用 this 来指代当前类的实例化对象</p><p>一个类可以生成 N 个对象</p><p>无参创建对象的时候，this = 799</p><p><img src="/2021/01/19/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/1.png" alt="1611035514896"></p><p>有参创建对象的时候，this = 866</p><p><img src="/2021/01/19/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/2.png" alt="1611035527432"></p><p>this 可以调用当前对象的属性和方法</p><p>this.id</p><p>this.show();</p><p>this();</p><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>1、同一个类中</p><p>2、方法名相同</p><p>3、参数列表不同</p><p>4、与返回值和访问权限修饰符无关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1+num2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2,<span class="keyword">int</span> num3)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1+num2+num3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test2 test2 = <span class="keyword">new</span> Test2();</span><br><span class="line">        test2.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        test2.add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h1><p>成员变量和局部变量指的是两种不同类型的变量，区别在哪？</p><p>变量所在的位置不同，作用域不同。</p><p>成员变量的作用域是整个类，成员变量是定义在方法外类中的。</p><p>局部变量的作用域只在它的方法中，局部变量是定义在某个方法中的。</p><p>成员变量会有默认值，可以不赋值</p><p>局部变量没有默认值，必须手动赋值</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h1&gt;&lt;p&gt;定义类的目的是为了创建对象，对象是 Java 的核心，面向对象编程语言。&lt;/p&gt;
&lt;p&gt;如何通过类创建对象？&lt;/p&gt;
&lt;p&gt;通过构造函数/构造方法/构造器创建对象。&lt;/p&gt;
&lt;p&gt;构造函数其实是一种特殊的方法：&lt;/p&gt;
&lt;p&gt;1、方法名必须是类名&lt;/p&gt;
&lt;p&gt;2、不需要定义返回值类型&lt;/p&gt;
&lt;p&gt;构造方法可以分为两类：无参构造和有参构造&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每个类都拥有一个默认的无参构造函数，不需要开发者手动定义。&lt;/p&gt;
&lt;p&gt;但是如果手动定义一个有参构造，则默认的无参构造会被覆盖掉，导致对象无法创建。&lt;/p&gt;
&lt;p&gt;User@b4c966a&lt;/p&gt;
&lt;p&gt;表示对象的信息 类@内存地址&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public String toString() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return getClass().getName() + &amp;quot;@&amp;quot; + Integer.toHexString(hashCode());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>双亲委派模型</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-01-19T05:46:04.000Z</published>
    <updated>2021-01-19T05:52:42.586Z</updated>
    
    <content type="html"><![CDATA[<p>ClassLoader</p><p>1、BootstrapClassLoader java包中的核心类库</p><p>2、ExtClassLoader javax包中的扩展类库</p><p>3、AppClassLoader 程序员自己写的类</p><p>4、自定义 ClassLoader</p><p>手写一个自定义 ClassLoader，反射</p><p>ClassLoader 的作用是将<strong>字节码文件</strong>加载到内存中</p><p>两个核心方法：findClass、defineClass</p><p>findClass：通过某种方法找到目标文件</p><p>defineClass：加载目标文件</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的类加载器</span></span><br><span class="line"><span class="comment"> * 功能：根据字节码文件的绝对路径来找到它，并完成加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存目标文件所在的目录</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器，创建一个MyClassLoader对象的，在创建的同时将绝对路径存起来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//定义我们加载字节码的逻辑</span></span><br><span class="line">        String classPath = <span class="keyword">this</span>.path+name+<span class="string">".class"</span>;</span><br><span class="line">        <span class="comment">//IO流读取</span></span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> FileInputStream(classPath);</span><br><span class="line">            outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((temp = inputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                outputStream.write(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = outputStream.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义类加载器，重写 findClass 方法，通过 IO 流读取本地编译好的字节码文件，生成字节数组，再将字节数组传给 ClassLoader 的 defineClass 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建MyClassLoader的对象</span></span><br><span class="line">        MyClassLoader myClassLoader = <span class="keyword">new</span> MyClassLoader(<span class="string">"D:\\java\\"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过findClass找到目标字节码文件，抽象成clazz对象</span></span><br><span class="line">            Class clazz = myClassLoader.findClass(<span class="string">"HelloWorld"</span>);</span><br><span class="line">            System.out.println(clazz);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h1><p>类在 JVM 中加载的规则，任何一个类只需要在 JVM 中加载一次，不需要重复加载。</p><p>加载一个类的时候，首先从自定义的加载器开始查找，看它有没有加载过这个类，如果加载过，则直接返回，如果没有加载过，怎么办？就委派给 AppClassLoader 去加载。</p><p>开始查找 AppClassLoader 有没有加载过这个类，如果加载过，直接返回，否则委派给 ExtClassLoader 去加载，重复上述过程，直到委派给 BootstrapClassLoader，如果加载过，直接返回，如果此时还是没有加载，就会逆向加载，将整个过程反过来</p><p>BootstrapClassLoader –&gt; ExtClassLoader –&gt; AppClassLoader –&gt; 自定义 ClassLoader</p><p>如果还是没有加载到，就会抛出 ClassNotFoundException。</p><p><img src="/2021/01/19/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/1.png" alt="1611035147371"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class clazz1 = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">        System.out.println(clazz1);</span><br><span class="line">        Class clazz2 = Class.forName(<span class="string">"javax.sql.DataSource"</span>);</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line">        Class clazz3 = Class.forName(<span class="string">"com.southwind.test.User"</span>);</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">        MyClassLoader myClassLoader = <span class="keyword">new</span> MyClassLoader(<span class="string">"D:\\java\\"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过findClass找到目标字节码文件，抽象成clazz对象</span></span><br><span class="line">            Class clazz4 = myClassLoader.findClass(<span class="string">"HelloWorld"</span>);</span><br><span class="line">            System.out.println(clazz4);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class clazz5 = Class.forName(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(clazz5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看源码 loadClass 加载类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//上锁，避免多线程导致类重复加载</span></span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="comment">//c==null，表示没有加载过</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//判断它的父加载器是否为 null</span></span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//委托父加载器进行加载</span></span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//如果父加载器==null，说明到了顶层，Bootstarp加载器加载该类</span></span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果还是没有加载到，调用Bootstrap的findClass加载</span></span><br><span class="line">                <span class="comment">//依次向下发展</span></span><br><span class="line">                <span class="comment">//如果还是找不到则抛出ClassNotFoundException异常</span></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ClassLoader&lt;/p&gt;
&lt;p&gt;1、BootstrapClassLoader java包中的核心类库&lt;/p&gt;
&lt;p&gt;2、ExtClassLoader javax包中的扩展类库&lt;/p&gt;
&lt;p&gt;3、AppClassLoader 程序员自己写的类&lt;/p&gt;
&lt;p&gt;4、自定义 ClassLoader&lt;/p&gt;
&lt;p&gt;手写一个自定义 ClassLoader，反射&lt;/p&gt;
&lt;p&gt;ClassLoader 的作用是将&lt;strong&gt;字节码文件&lt;/strong&gt;加载到内存中&lt;/p&gt;
&lt;p&gt;两个核心方法：findClass、defineClass&lt;/p&gt;
&lt;p&gt;findClass：通过某种方法找到目标文件&lt;/p&gt;
&lt;p&gt;defineClass：加载目标文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-01-19T05:37:58.000Z</published>
    <updated>2021-01-19T05:53:16.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>万物皆对象：将 Java 程序的所有参与角色都看成一个个对象，通过对象和对象之间的相互调用来完成系统的功能。</p><h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><p>面向对象编程思想产生之前，使用的是面向过程的编程思想（面向功能划分的软件结构），自上至下，将一个大问题拆分成很多个小问题，再将小问题拆分成更小的问题，解决问题划分成一个个具体的步骤，分别执行，所有的步骤整合起来就是应用程序的功能，最小粒度细化到了方法的层面。</p><p>一个应该程序是由 N 个方法组成的，然后这些方法按一定的顺序执行。</p><p>你开车去北京：</p><p>1、打开车门</p><p>2、坐进车里</p><p>3、发动汽车</p><p>4、踩油门</p><p>……</p><p>500</p><p>….</p><p>1000、到达北京</p><p>面向过程的方式步骤繁琐、代码的可维护性很差，我们需要解决这些问题，如何解决？使用新的编程思想来完成，面向对象的编程思想。</p><p>面向对象只需要关注整件事情的参与者，即将每一个参与者都抽象成一个对象，再让这些对象完成相互关联即可。</p><p>你开车去北京：你、汽车、天津</p><p>让汽车载着你去北京，忽略掉过程中的每一个细节，关注点在于 3 个对象之间的关系，面向过程关注点在于每一个细微的步骤。</p><p>面向对象的优势在于灵活性和扩展性会更好。</p><a id="more"></a><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>1、属性：描述对象的静态特征</p><p>2、方法：描述对象的动态特征</p><p>对象就是用来描述客观存在的一个实体，该实体由一组方法和属性构成。</p><p>类是用来组织 Java 程序的，Java 程序是由很多个类组成的。</p><p>类是产生对象的模板，所有的对象都是通过类来创建的。</p><p>二者关系：</p><p>1、类是很多同类型对象的抽象化描述，这些对象具有相同的特征（属性和方法）。</p><p>2、对象是类的具体实例。</p><p>狗狗是类，隔壁家的旺财是对象。</p><p>一个类可以创建出很多个对象，一个对象一般来讲只能属于一个类，但是不够准确，因为类还有继承的概念（狗属于宠物的子类，宠物属于动物的子类），旺财是狗的对象，也可以是宠物的对象，也可以是动物的对象（继承、多态）。</p><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line"><span class="comment">//定义属性</span></span><br><span class="line">    <span class="keyword">public</span> 数据类型 属性名;</span><br><span class="line"><span class="comment">//定义方法</span></span><br><span class="line">    <span class="keyword">public</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String result = test2();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">sout(<span class="string">"123"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">char</span> gender;</span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"展示用户信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-中的类是如何加载的？"><a href="#Java-中的类是如何加载的？" class="headerlink" title="Java 中的类是如何加载的？"></a>Java 中的类是如何加载的？</h2><p>类加载器 ClassLoader：将字节码文件（不是 Java 文件，而是编译之后的 class 文件）加载到内存（JVM Java虚拟机）中。</p><p>主要作用是将 JVM 以外的 Class 字节码文件装载到 JVM 中，进行初始化、执行操作。</p><p>Java 类的加载过程分为三步：加载（把文件给机器）、链接（机器读取文件数据）、初始化（根据数据创建对象及其他信息）。</p><p><img src="/2021/01/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.png" alt="1611034876559"></p><h2 id="ClassLoader-有-4-种类型"><a href="#ClassLoader-有-4-种类型" class="headerlink" title="ClassLoader 有 4 种类型"></a>ClassLoader 有 4 种类型</h2><p>1、<strong>Bootstrap</strong>ClassLoader</p><p>2、<strong>Ext</strong>ClassLoader</p><p>3、<strong>App</strong>ClassLoader</p><p>4、<strong>自定义</strong> ClassLoader</p><p>BootstrapClassLoader，C++ 编写，用来加载 Java 的<strong>核心类库</strong>，JDK 中大部分的类，java 开头的类。</p><p>ExtClassLoader，Java 编写，用来加载 Java 的<strong>扩展类库</strong>，javax 开头的类。</p><p>AppClassLoader，Java 编写，用来加载<strong>程序员自己编写的类</strong>。</p><p>自定义 ClassLoader，Java 编写，开发者可以<strong>根据具体的需求来编写类加载器</strong>，可以实现定制化加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h1&gt;&lt;p&gt;万物皆对象：将 Java 程序的所有参与角色都看成一个个对象，通过对象和对象之间的相互调用来完成系统的功能。&lt;/p&gt;
&lt;h2 id=&quot;什么是面向对象&quot;&gt;&lt;a href=&quot;#什么是面向对象&quot; class=&quot;headerlink&quot; title=&quot;什么是面向对象&quot;&gt;&lt;/a&gt;什么是面向对象&lt;/h2&gt;&lt;p&gt;面向对象编程思想产生之前，使用的是面向过程的编程思想（面向功能划分的软件结构），自上至下，将一个大问题拆分成很多个小问题，再将小问题拆分成更小的问题，解决问题划分成一个个具体的步骤，分别执行，所有的步骤整合起来就是应用程序的功能，最小粒度细化到了方法的层面。&lt;/p&gt;
&lt;p&gt;一个应该程序是由 N 个方法组成的，然后这些方法按一定的顺序执行。&lt;/p&gt;
&lt;p&gt;你开车去北京：&lt;/p&gt;
&lt;p&gt;1、打开车门&lt;/p&gt;
&lt;p&gt;2、坐进车里&lt;/p&gt;
&lt;p&gt;3、发动汽车&lt;/p&gt;
&lt;p&gt;4、踩油门&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;500&lt;/p&gt;
&lt;p&gt;….&lt;/p&gt;
&lt;p&gt;1000、到达北京&lt;/p&gt;
&lt;p&gt;面向过程的方式步骤繁琐、代码的可维护性很差，我们需要解决这些问题，如何解决？使用新的编程思想来完成，面向对象的编程思想。&lt;/p&gt;
&lt;p&gt;面向对象只需要关注整件事情的参与者，即将每一个参与者都抽象成一个对象，再让这些对象完成相互关联即可。&lt;/p&gt;
&lt;p&gt;你开车去北京：你、汽车、天津&lt;/p&gt;
&lt;p&gt;让汽车载着你去北京，忽略掉过程中的每一个细节，关注点在于 3 个对象之间的关系，面向过程关注点在于每一个细微的步骤。&lt;/p&gt;
&lt;p&gt;面向对象的优势在于灵活性和扩展性会更好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E6%95%B0%E7%BB%84/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E6%95%B0%E7%BB%84/</id>
    <published>2021-01-19T05:30:15.000Z</published>
    <updated>2021-01-19T05:36:26.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组就是一种可以存放大量<strong>数据类型相同</strong>的变量的数据结构。</p><p>数组下标是 0 开始的，为什么？</p><p>为了极致的检索效率</p><p><img src="/2021/01/19/%E6%95%B0%E7%BB%84/1.png" alt="1611034260693"></p><p>1、数组中存储的数据必须都是同一种数据类型的。</p><p>2、数组在内存中开辟的空间是连续的，通过寻址公式快速计算出不同下标对应的内存地址。</p><a id="more"></a><h1 id="数组的基本要素"><a href="#数组的基本要素" class="headerlink" title="数组的基本要素"></a>数组的基本要素</h1><p>一个数组是由 4 个基本元素构成：</p><p>1、数组名称</p><p>2、数组元素</p><p>3、元素下标</p><p>4、数据类型</p><p><img src="/2021/01/19/%E6%95%B0%E7%BB%84/2.png" alt="1611034325423"></p><h1 id="如何使用数组"><a href="#如何使用数组" class="headerlink" title="如何使用数组"></a>如何使用数组</h1><p>1、声明数组：数据类型[] 数组名;数据类型 数组名[];</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array;</span><br></pre></td></tr></table></figure><p>2、分配内存空间：创建数组时必须要指定它的长度，数组长度不可变，固定的，根据这个长度和数据类型在内存（堆内存）中开辟一串连续的空间来存储数组元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br></pre></td></tr></table></figure><p>3、给数组赋值：通过下标找到对应的内存空间，把值存入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">array[<span class="number">1</span>] = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>4、使用数组：通过下标取出对应的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sout(array[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><blockquote><p>先声明，再赋值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        int[] array;</span></span><br><span class="line"><span class="comment">//        array = new int[3];</span></span><br><span class="line"><span class="comment">//        array[0] = 1;</span></span><br><span class="line"><span class="comment">//        array[1] = 2;</span></span><br><span class="line"><span class="comment">//        array[2] = 3;</span></span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>边声明边赋值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>使用数组常见错误</p></blockquote><p>1、数组的数据类型不匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>2、边声明边赋值必须写在同一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array;</span><br><span class="line">array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>3、数组下标越界异常</p><p><img src="/2021/01/19/%E6%95%B0%E7%BB%84/3.png" alt="1611034399727"></p><h1 id="数组的常用操作和方法"><a href="#数组的常用操作和方法" class="headerlink" title="数组的常用操作和方法"></a>数组的常用操作和方法</h1><p>1、求数组中元素的最大值</p><p>2、求数组中元素的最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">73</span>,<span class="number">80</span>,<span class="number">62</span>,<span class="number">93</span>,<span class="number">96</span>,<span class="number">87</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &lt; max)&#123;</span><br><span class="line">                max = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、在数组的指定位置插入一个数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">73</span>,<span class="number">80</span>,<span class="number">62</span>,<span class="number">93</span>,<span class="number">96</span>,<span class="number">87</span>&#125;;</span><br><span class="line">        <span class="comment">//将83插入到下标为3的位置</span></span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">83</span>;</span><br><span class="line">        <span class="comment">//1、创建长度为7的新数组</span></span><br><span class="line">        <span class="keyword">int</span>[] newArray = <span class="keyword">new</span> <span class="keyword">int</span>[array.length+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//2、将原数组中的值转移到新数组中，将下标3空出来</span></span><br><span class="line">        <span class="comment">//3以前</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            newArray[i] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3以后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; newArray.length; i++) &#123;</span><br><span class="line">            newArray[i] = array[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把83存入下标3中</span></span><br><span class="line">        newArray[<span class="number">3</span>] = <span class="number">83</span>;</span><br><span class="line">        System.out.println(Arrays.toString(newArray));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、数组排序 </p><p>冒泡排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">96</span>,<span class="number">93</span>,<span class="number">87</span>,<span class="number">80</span>,<span class="number">73</span>,<span class="number">62</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>-j; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(array[i] &gt; array[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = array[i];</span><br><span class="line">            array[i] = array[i+<span class="number">1</span>];</span><br><span class="line">            array[i+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 提供了一个工具类，专门对数组进行各种操作，Arrays</p><p>1、安装虚拟机 Linux 不需要花钱</p><p>2、租一台服务器 阿里云 腾讯云 华为云 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">73</span>,<span class="number">80</span>,<span class="number">62</span>,<span class="number">93</span>,<span class="number">96</span>,<span class="number">87</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] array2 = &#123;<span class="number">73</span>,<span class="number">80</span>,<span class="number">53</span>,<span class="number">93</span>,<span class="number">96</span>,<span class="number">87</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] array3 = &#123;<span class="number">66</span>,<span class="number">55</span>,<span class="number">44</span>,<span class="number">33</span>,<span class="number">22</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.equals(array, array2));</span><br><span class="line">        Arrays.sort(array);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">        Arrays.fill(array, <span class="number">6</span>);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">        <span class="keyword">int</span>[] newArray = Arrays.copyOf(array3, <span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.toString(newArray));</span><br><span class="line">        <span class="comment">//二分查找法的前提是目标数组必须是有序的，使用二分查找法之前应该先对数组进行排序</span></span><br><span class="line">        Arrays.sort(array2);</span><br><span class="line">        System.out.println(Arrays.toString(array2));</span><br><span class="line">        System.out.println(Arrays.binarySearch(array2, <span class="number">99</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><p>一共有 6 个货柜，每个货柜中有 10 件商品</p><p>用数组的结构来保存所有商品的价格</p><p>二维数组其实就是一维数组，只不过一维数组中保存的值是另一个一维数组。</p><p><img src="/2021/01/19/%E6%95%B0%E7%BB%84/4.png" alt="1611034565490"></p><p>二维数组使用与一维数组类似</p><p>1、声明</p><p>2、开辟内存空间</p><p>3、赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、声明二维数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array;</span><br><span class="line">        <span class="comment">//2、开辟内存空间</span></span><br><span class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][];</span><br><span class="line">        <span class="comment">//3、赋值</span></span><br><span class="line">        array[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        array[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] children = array[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; children.length; j++) &#123;</span><br><span class="line">                System.out.println(children[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"****************"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>超市卖鸡蛋货柜分上、中、下3层，每层分6个格挡，每个格挡中鸡蛋的个数是层数*格挡数，要求使用二维数组来装载所有的鸡蛋并求出总数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"------第"</span>+(i+<span class="number">1</span>)+<span class="string">"层货柜------"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> num = (i+<span class="number">1</span>) * (j+<span class="number">1</span>);</span><br><span class="line">                sum += num;</span><br><span class="line">                System.out.println(<span class="string">"第"</span>+(j+<span class="number">1</span>)+<span class="string">"个格挡的鸡蛋个数是："</span>+num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"鸡蛋的总数是"</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;p&gt;数组就是一种可以存放大量&lt;strong&gt;数据类型相同&lt;/strong&gt;的变量的数据结构。&lt;/p&gt;
&lt;p&gt;数组下标是 0 开始的，为什么？&lt;/p&gt;
&lt;p&gt;为了极致的检索效率&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/01/19/%E6%95%B0%E7%BB%84/1.png&quot; alt=&quot;1611034260693&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、数组中存储的数据必须都是同一种数据类型的。&lt;/p&gt;
&lt;p&gt;2、数组在内存中开辟的空间是连续的，通过寻址公式快速计算出不同下标对应的内存地址。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构复杂度计算</title>
    <link href="https://xzso3o.github.io/2021/01/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
    <id>https://xzso3o.github.io/2021/01/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97/</id>
    <published>2021-01-19T05:28:15.000Z</published>
    <updated>2021-01-19T05:29:37.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h1><ul><li>数据就是指一组数据的存储结构。</li><li>算法就是操作数据的一种方式。</li></ul><p>数据结构为算法进行服务，算法需要在特定的数据结构之上运行。</p><p>快：让程序运行速度更快，时间</p><p>省：让程序更加节省内存空间，空间</p><p>如何分析算法的执行效率</p><p>直接统计程序的运行时间和占用内存是可以的，叫做事后统计法，这种方式显然不客观，</p><p>太依赖于硬件配置和数据规模。</p><p>我们需要有一种统计方式，不需要考虑硬件配置和数据规模，估算算法执行效率的方式，这个方法就是时间复杂度分析法和空间复杂度分析法。</p><p>时间复杂度分析的是一个大概的趋势，并不是具体的数值。</p><a id="more"></a><h1 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;=n;i++)&#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;=n;i++)&#123;</span><br><span class="line">    sum += i;</span><br></pre></td></tr></table></figure><p>每行代码执行时间为 time，我们认为只有读数据、运算、写数据的代码才占用时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time+time+n*time+n*time &#x3D; 2time+2n*time&#x3D;(2n+2)*time</span><br></pre></td></tr></table></figure><p>代码的执行时间和每行代码的执行次数成正比，记作 T(n)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;=n;i++)&#123;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;=n;j++)&#123;</span><br><span class="line">            sum += i*j;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;=n;i++)&#123;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;j&lt;=n;j++)&#123;</span><br><span class="line">        sum += i*j;</span><br></pre></td></tr></table></figure><p>每行代码执行时间为 time，我们认为只有读数据、运算、写数据的代码才占用时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3*time + 2n*time + 2n^2*time &#x3D; (2n^2+2n+3)*time</span><br></pre></td></tr></table></figure><p>T(n)：所有代码的执行时间和每行代码的执行次数成正比。</p><p>大 O 公式：T(n) = O(f(n))</p><p>T(n) 表示代码的执行时间</p><p>n 表示数据规模</p><p>f(n) 表示每行代码执行的次数总和的计算公式</p><p>O 表示代码的执行时间 T(n) 和 f(n) 成正比。</p><p>(2n+2)*time</p><p>T(n) = O((2n+2))</p><p>T(n) = O(2n^2+2n+3)</p><p>当 n 趋于无穷大的时候，低阶、系数、常量都可以省略，只需要记录最大量级即可。</p><p>T(n) = O(n)</p><p>T(n) = O(n^2)</p><h1 id="3-种时间复杂度统计方法"><a href="#3-种时间复杂度统计方法" class="headerlink" title="3 种时间复杂度统计方法"></a>3 种时间复杂度统计方法</h1><p>1、只关注循环执行次数最多的一行代码</p><p>2、加法法则：总复杂度等于量级最大的那段代码的复杂度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;p &lt; <span class="number">100</span>;p++)&#123;</span><br><span class="line">        sum1 =+ p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;q&lt;n;q++)&#123;</span><br><span class="line">        sum2 += q;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;=n;j++)&#123;</span><br><span class="line">            sum3 += i*j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum1+sum2+sum3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>100 + O(n) + O(n^2) </p><p>O(n^2)</p><p>T1(n) = O(f(n))</p><p>T2(n) = O(g(n))</p><p>T(n) = T1(n) + T2(n) = max(O(f(n)),O(g(n))) </p><p>3、乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T1(n) &#x3D; O(f(n))，T2(n) &#x3D; O(g(n))</span><br><span class="line">T(n) &#x3D; T1(n)*T2(n) &#x3D; O(f(n))*O(g(n)) &#x3D; O(f(n)*g(n))</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;n;i++)&#123;</span><br><span class="line">ret += f(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;n;i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T(n) = O(n)*O(n) = O(n^2)</p><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>时间复杂度：表示算法的执行时间和数据规模之间的增长关系。</p><p>空间复杂度：表示算法的存储空间于数据规模之间的增长关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;n;i++)&#123;</span><br><span class="line">        a[i] = i*i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        sout(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空间复杂度 O(n)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构和算法&quot;&gt;&lt;a href=&quot;#数据结构和算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构和算法&quot;&gt;&lt;/a&gt;数据结构和算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;数据就是指一组数据的存储结构。&lt;/li&gt;
&lt;li&gt;算法就是操作数据的一种方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据结构为算法进行服务，算法需要在特定的数据结构之上运行。&lt;/p&gt;
&lt;p&gt;快：让程序运行速度更快，时间&lt;/p&gt;
&lt;p&gt;省：让程序更加节省内存空间，空间&lt;/p&gt;
&lt;p&gt;如何分析算法的执行效率&lt;/p&gt;
&lt;p&gt;直接统计程序的运行时间和占用内存是可以的，叫做事后统计法，这种方式显然不客观，&lt;/p&gt;
&lt;p&gt;太依赖于硬件配置和数据规模。&lt;/p&gt;
&lt;p&gt;我们需要有一种统计方式，不需要考虑硬件配置和数据规模，估算算法执行效率的方式，这个方法就是时间复杂度分析法和空间复杂度分析法。&lt;/p&gt;
&lt;p&gt;时间复杂度分析的是一个大概的趋势，并不是具体的数值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>循环</title>
    <link href="https://xzso3o.github.io/2021/01/18/%E5%BE%AA%E7%8E%AF/"/>
    <id>https://xzso3o.github.io/2021/01/18/%E5%BE%AA%E7%8E%AF/</id>
    <published>2021-01-18T13:19:15.000Z</published>
    <updated>2021-01-19T05:28:44.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="while-循环和-do-while-循环的区别"><a href="#while-循环和-do-while-循环的区别" class="headerlink" title="while 循环和 do-while 循环的区别"></a>while 循环和 do-while 循环的区别</h1><p>do-while 循环会先执行一次循环体，再做判断（循环条件），决定是否进行下一次的循环，如果成立，则继续执行循环条，如果不成立，则跳出循环，所以至少会执行一次循环体。</p><p>while 先判断循环条件，再执行循环体，有可能一次都不执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"just do it"</span>);</span><br><span class="line">            num++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (num&lt;<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">while</span> (num&lt;<span class="number">90</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"just do it"</span>);</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="for-和-while、do-while-之间的区别"><a href="#for-和-while、do-while-之间的区别" class="headerlink" title="for 和 while、do-while 之间的区别"></a>for 和 while、do-while 之间的区别</h1><p>相同点：都遵循循环四要素。</p><p>不同点：</p><ul><li>while 和 do-while 适用于循环次数不确定的场景，for 适用于循环次数确定的场景。</li></ul><p>阻塞式方法</p><p>程序暂停，等待某一个操作，如果这个操作不执行，程序会一直暂停，直到该操作执行，才会继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//次数确定</span></span><br><span class="line">        <span class="comment">//Scanner 是 JDK 提供的一个对象，可以通过该对象获取用户输入的数据</span></span><br><span class="line"><span class="comment">//        System.out.print("请输入num的值：");</span></span><br><span class="line"><span class="comment">//        Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        int num = scanner.nextInt();</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; num; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(i);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//张三练习写代码 hello world，直到我满意为止</span></span><br><span class="line"><span class="comment">//        String result = "no";</span></span><br><span class="line"><span class="comment">//        Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        do &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("张三练习写代码 hello world");</span></span><br><span class="line"><span class="comment">//            System.out.print("你是否满意？yes/no:");</span></span><br><span class="line"><span class="comment">//            result = scanner.next();</span></span><br><span class="line"><span class="comment">//        &#125;while(result.equals("no"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        while(result.equals("no"))&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("张三练习写代码 hello world");</span></span><br><span class="line"><span class="comment">//            System.out.print("你是否满意？yes/no:");</span></span><br><span class="line"><span class="comment">//            result = scanner.next();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println("张三练习完毕");</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for 和 while 是先判断循环条件，再执行循环体；do-while 第一次是先执行，再判断循环条件。</li></ul><h1 id="双重循环"><a href="#双重循环" class="headerlink" title="双重循环"></a>双重循环</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">300</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span> ; i++) &#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/18/%E5%BE%AA%E7%8E%AF/1.png" alt="1610975904763"></p><p>像这种编程题就是找规律：</p><p>上半部分</p><p>第一行0：先打印 3 个空格，再打印 1 个数字</p><p>第二行1：先打印 2 个空格，再打印 2 个数字</p><p>第三行2：先打印 1 个空格，再打印 3 个数字</p><p>第四行3：先打印 0 个空格，再打印 4 个数字</p><p>行号从 0 开始，空格数 = 3 - 行号，数字个数 = 行号 + 1</p><p>下半部分</p><p>第一行0：先打印 1 个空格，再打印 3 个数字</p><p>第二行1：先打印 2 个空格，再打印 2 个数字</p><p>第三行2：先打印 3 个空格，再打印 1 个数字</p><p>行号从 0 开始，空格数 = 行号+1，数字个数 = 3 - 行号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//上半部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//打印空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>-j; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//打印数字</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt; <span class="number">2</span>*j+<span class="number">1</span>; i++) &#123;</span><br><span class="line">                System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下半部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//打印空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j+<span class="number">1</span>; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//打印数字</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>-j; i &lt; <span class="number">5</span>-<span class="number">2</span>*j; i++) &#123;</span><br><span class="line">                System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="终止循环"><a href="#终止循环" class="headerlink" title="终止循环"></a>终止循环</h1><p>break</p><p>continue</p><p>break 跳出整个循环，continue 跳出本次循环，进入下一次循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1-100整数之和,当结果大于50的时候,结束循环</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;<span class="number">50</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;while-循环和-do-while-循环的区别&quot;&gt;&lt;a href=&quot;#while-循环和-do-while-循环的区别&quot; class=&quot;headerlink&quot; title=&quot;while 循环和 do-while 循环的区别&quot;&gt;&lt;/a&gt;while 循环和 do-while 循环的区别&lt;/h1&gt;&lt;p&gt;do-while 循环会先执行一次循环体，再做判断（循环条件），决定是否进行下一次的循环，如果成立，则继续执行循环条，如果不成立，则跳出循环，所以至少会执行一次循环体。&lt;/p&gt;
&lt;p&gt;while 先判断循环条件，再执行循环体，有可能一次都不执行。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;just do it&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (num&amp;lt;&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (num&amp;lt;&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;just do it&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>数据类型转换、运算符和流程控制</title>
    <link href="https://xzso3o.github.io/2021/01/18/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://xzso3o.github.io/2021/01/18/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-01-18T13:13:03.000Z</published>
    <updated>2021-01-18T13:21:13.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据类型转换"><a href="#1-数据类型转换" class="headerlink" title="1.数据类型转换"></a>1.数据类型转换</h1><h2 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">        <span class="keyword">double</span> num2 = num1;</span><br><span class="line">        System.out.println(num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序会自动识别数据类型并完成转换，这种操作对数据类型是有要求的，并不是所有的数据类型都能完成自动转换。</p><p>1、整型转浮点型都可以，跟字节大小没有关系。</p><p>int  –&gt;  float/double</p><p>long  –&gt;  float/double</p><p>2、浮点型转整型，都无法完成，因为有精度损失，小数点后数值有丢失，对数据的描述不精准。</p><p>3、精度一样（都是整型/都是浮点型）的情况下，只能由低字节转为高字节，反之则不行。</p><h2 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h2><p>当自动转换不能实现的时候，我们可以通过强制手段进行转换，尽量不要强转，如果是基本数据类型，可能会有数据的精度损失，如果是引用类型，可能抛出类型转换异常。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> num1 = <span class="number">10.6f</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = (<span class="keyword">int</span>)num1;</span><br><span class="line">        System.out.println(num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        Cat cat = (Cat) animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h1><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>=，将 = 右边的值赋给等号左边，= 右边可以是具体数值，也可以是一个变量，= 左边一定是变量。</p><p>int num1 = 10；int num2 = 11;交换 num1 和 num2 的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">11</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        temp = num1;</span><br><span class="line">        num1 = num2;</span><br><span class="line">        num2 = temp;</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">        System.out.println(num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本算术运算符"><a href="#基本算术运算符" class="headerlink" title="基本算术运算符"></a>基本算术运算符</h2><p>+、-、*、/、++、–</p><p>num++，先执行，再+1</p><p>++num，先+1，再执行</p><h2 id="复合算术运算符"><a href="#复合算术运算符" class="headerlink" title="复合算术运算符"></a>复合算术运算符</h2><p>在基本算术运算符的基础上进行进一步的简化操作</p><p>+=、-=、*=、/=、%=</p><p>变量A += 变量B：先求出变量A+变量B的值，再将结果赋值给变量A</p><p>变量A = 变量A+变量B</p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>是用来计算一个表达式是否成立，boolean true/false</p><p>==、!=、&gt;、&lt;、&gt;=、&lt;=</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D; 只能用作数值类型的比较</span><br><span class="line">&#x3D;&#x3D;、!&#x3D; 所有类型都可以用</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>只能操作 boolen 类型的数据，判断 boolean 数据之间的逻辑关系，与、或、非</p><p>&amp;、|、！、&amp;&amp;（短路与）、||（短路或）</p><p>&amp;&amp; 和 &amp; 从结果上看没有区别，但是 &amp;&amp; 的效率更高。</p><p>&amp;/&amp;&amp; 两个操作数都为 true，结果为 true，否则为 false</p><p>|/|| 两个操作数只要有一个为 true，结果为 true，否则为 false</p><p>! 取反操作</p><p>&amp;&amp; 如果左边表达式为 false，则不执行右边的表达式，直接返回结果 false。</p><p>|| 如果左边表达式为 true，则不执行右边的表达式，直接返回结果 true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">11</span>;</span><br><span class="line">        System.out.println((num1++ == num2) &amp;&amp; (++num1 == num2));</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>三目运算符、三元表达式，执行赋值操作，根据不同的条件给同一个变量赋不同的值。</p><p>变量A = 条件？值1：值2</p><p>int num = 10==9?1:2</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>对操作数以二进制为单位进行运算，首先将操作数转为二进制，再进行运算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&amp; 按位与:每一位数字一一对应，如果都为1，则该位记作1，否则为0</span><br><span class="line"></span><br><span class="line">| 按位或:每一位数字一一对应，只要有一个为1，则改为记作1，否则为0</span><br><span class="line"></span><br><span class="line">^ 按位异或:每一位数字一一对应，相同记作0，不同记作1</span><br><span class="line"></span><br><span class="line">&lt;&lt; 左移:A&lt;&lt;B,A 乘以 2 的B次方</span><br><span class="line"></span><br><span class="line">&gt;&gt; 右移:A&gt;&gt;B,A 除以 2 的B次方</span><br></pre></td></tr></table></figure><h1 id="3-流程控制"><a href="#3-流程控制" class="headerlink" title="3.流程控制"></a>3.流程控制</h1><p>if-else 可以嵌套使用</p><ul><li>if 后面必须跟(条件)</li><li>else 后面不能根据(条件)</li><li>else 后面可以直接跟{}，也可以跟另外一个 if(条件)</li></ul><p>switch-case</p><p>功能上跟 if-else 是一致的，都是用来做流程控制的，区别在于 if-else 可以做等值判断、大于小于判断，switch-case 只能做等值判断。</p><p>同样做等值判断的情况下，switch-case 结构会比 if-else 更加清晰，有利于代码的可读性。</p><p>case 后面需要加 break</p><p>循环</p><p>for、while、do-while、foreach</p><p>循环四要素：</p><p>1、初始化循环变量</p><p>2、循环条件</p><p>3、循环体</p><p>4、更新循环变量</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-数据类型转换&quot;&gt;&lt;a href=&quot;#1-数据类型转换&quot; class=&quot;headerlink&quot; title=&quot;1.数据类型转换&quot;&gt;&lt;/a&gt;1.数据类型转换&lt;/h1&gt;&lt;h2 id=&quot;自动转换&quot;&gt;&lt;a href=&quot;#自动转换&quot; class=&quot;headerlink&quot; title=&quot;自动转换&quot;&gt;&lt;/a&gt;自动转换&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num1 = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(num1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; num2 = num1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(num2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;程序会自动识别数据类型并完成转换，这种操作对数据类型是有要求的，并不是所有的数据类型都能完成自动转换。&lt;/p&gt;
&lt;p&gt;1、整型转浮点型都可以，跟字节大小没有关系。&lt;/p&gt;
&lt;p&gt;int  –&amp;gt;  float/double&lt;/p&gt;
&lt;p&gt;long  –&amp;gt;  float/double&lt;/p&gt;
&lt;p&gt;2、浮点型转整型，都无法完成，因为有精度损失，小数点后数值有丢失，对数据的描述不精准。&lt;/p&gt;
&lt;p&gt;3、精度一样（都是整型/都是浮点型）的情况下，只能由低字节转为高字节，反之则不行。&lt;/p&gt;
&lt;h2 id=&quot;强制转换&quot;&gt;&lt;a href=&quot;#强制转换&quot; class=&quot;headerlink&quot; title=&quot;强制转换&quot;&gt;&lt;/a&gt;强制转换&lt;/h2&gt;&lt;p&gt;当自动转换不能实现的时候，我们可以通过强制手段进行转换，尽量不要强转，如果是基本数据类型，可能会有数据的精度损失，如果是引用类型，可能抛出类型转换异常。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>变量、数据类型</title>
    <link href="https://xzso3o.github.io/2021/01/18/%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://xzso3o.github.io/2021/01/18/%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-01-18T13:07:14.000Z</published>
    <updated>2021-01-18T13:12:19.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h1><h2 id="什么是变量？"><a href="#什么是变量？" class="headerlink" title="什么是变量？"></a>什么是变量？</h2><p>变量是计算机语言中的一个概念，可以表示一个具体的数值，同时这个值是可以改变的。</p><h2 id="为什么要使用变量？"><a href="#为什么要使用变量？" class="headerlink" title="为什么要使用变量？"></a>为什么要使用变量？</h2><p>100 元买了一款理财产品，年利率 3%，计算你年底的收益。</p><p>100</p><p>3%</p><p>乘法运算</p><p>1、需要在电脑中存储 100 和 3% 这两个数据。</p><p>2、将两个数据进行乘法运算。</p><p>计算机如何存储数据？</p><p>计算机将数据存储在内存中的，内存会为不同的数据开辟不同的空间来存储。</p><p><strong>每一块内存都有一个独一无二的地址</strong>，我们通过内存地址找到对应的内存，进而取出内存中存储的数据。</p><p>内存地址是一个十六进制的数据，0x6fff5cde3d6c</p><p><strong>内存地址不便于记忆，如何解决？通过变量解决</strong></p><p>因为内存地址不好记，我们就自定义一个好记的名字来代替内存地址，<strong>指向内存区域。</strong></p><a id="more"></a><h2 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h2><p>1、声明变量的数据类型和变量名（可以包含数字、字母、下划线、$，不能包含空格、运算符，不能用纯关键字来命名，不能以数字开头、大小写可以混用，驼峰式命名法：第一个单词全部小写，从第二个单词开始，首字母大写，后面全小写，userId、firstName、studentNum、studentSecondNum）</p><p>2、给内存空间赋值，这个值就是变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//100</span></span><br><span class="line">        <span class="comment">//1、开辟内存空间，int，变量名 num1</span></span><br><span class="line">        <span class="keyword">int</span> num1;</span><br><span class="line">        <span class="comment">//2、赋值</span></span><br><span class="line">        num1 = <span class="number">100</span>;</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Java-中的数据类型"><a href="#2-Java-中的数据类型" class="headerlink" title="2.Java 中的数据类型"></a>2.Java 中的数据类型</h1><h2 id="Java-基本数据类型"><a href="#Java-基本数据类型" class="headerlink" title="Java 基本数据类型"></a>Java 基本数据类型</h2><p>数值类型、非数值类型</p><table><thead><tr><th>基本数据类型</th><th>占用空间</th></tr></thead><tbody><tr><td>byte</td><td>1个字节（byte）8 bit</td></tr><tr><td>int</td><td>4个byte 32bit</td></tr><tr><td>short</td><td>2个byte 16bit</td></tr><tr><td>long</td><td>8个byte 64bit</td></tr><tr><td>float</td><td>4个byte 32bit</td></tr><tr><td>double</td><td>8个byte 64bit</td></tr><tr><td>char</td><td>2个byte 16bit</td></tr><tr><td>boolean</td><td>1 bit，1/8 byte</td></tr></tbody></table><p>int、double、boolean、String（引用类型）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ 既可以表示拼接也可以表示运算</span><br><span class="line">如果 + 左右两边至少有一边是字符串，就是拼接，将不是字符串的数据转成字符串，然后将两个字符串进行拼接</span><br><span class="line">否则就进行算术加法运算</span><br><span class="line">如果 + 左右两边是字符，而不是字符串，则不是拼接，将字符转为对应的 ASCII 码（数值），再进行加法运算</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">        String name = <span class="string">"张三"</span>;</span><br><span class="line">        System.out.println(<span class="string">"用户信息"</span>);</span><br><span class="line">        System.out.println(<span class="string">"编号："</span> + id);</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name);</span><br><span class="line">        System.out.println(<span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-变量&quot;&gt;&lt;a href=&quot;#1-变量&quot; class=&quot;headerlink&quot; title=&quot;1.变量&quot;&gt;&lt;/a&gt;1.变量&lt;/h1&gt;&lt;h2 id=&quot;什么是变量？&quot;&gt;&lt;a href=&quot;#什么是变量？&quot; class=&quot;headerlink&quot; title=&quot;什么是变量？&quot;&gt;&lt;/a&gt;什么是变量？&lt;/h2&gt;&lt;p&gt;变量是计算机语言中的一个概念，可以表示一个具体的数值，同时这个值是可以改变的。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用变量？&quot;&gt;&lt;a href=&quot;#为什么要使用变量？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用变量？&quot;&gt;&lt;/a&gt;为什么要使用变量？&lt;/h2&gt;&lt;p&gt;100 元买了一款理财产品，年利率 3%，计算你年底的收益。&lt;/p&gt;
&lt;p&gt;100&lt;/p&gt;
&lt;p&gt;3%&lt;/p&gt;
&lt;p&gt;乘法运算&lt;/p&gt;
&lt;p&gt;1、需要在电脑中存储 100 和 3% 这两个数据。&lt;/p&gt;
&lt;p&gt;2、将两个数据进行乘法运算。&lt;/p&gt;
&lt;p&gt;计算机如何存储数据？&lt;/p&gt;
&lt;p&gt;计算机将数据存储在内存中的，内存会为不同的数据开辟不同的空间来存储。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每一块内存都有一个独一无二的地址&lt;/strong&gt;，我们通过内存地址找到对应的内存，进而取出内存中存储的数据。&lt;/p&gt;
&lt;p&gt;内存地址是一个十六进制的数据，0x6fff5cde3d6c&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存地址不便于记忆，如何解决？通过变量解决&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为内存地址不好记，我们就自定义一个好记的名字来代替内存地址，&lt;strong&gt;指向内存区域。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>注释、关键词</title>
    <link href="https://xzso3o.github.io/2021/01/18/%E6%B3%A8%E9%87%8A%E3%80%81%E5%85%B3%E9%94%AE%E8%AF%8D/"/>
    <id>https://xzso3o.github.io/2021/01/18/%E6%B3%A8%E9%87%8A%E3%80%81%E5%85%B3%E9%94%AE%E8%AF%8D/</id>
    <published>2021-01-18T13:02:12.000Z</published>
    <updated>2021-01-18T13:22:15.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h1><p>帮助开发者更好地读懂代码，用<strong>通俗易懂</strong>的语言对代码进行解释说明，方便自己和他人阅读。</p><p>注释可以是编程思路，也可以是功能描述或者程序的作用，总之就是对代码的进一步阐述。</p><p>注释是专门给程序员看的，计算机直接跳过。</p><p>Java 中有几种注释？</p><p>1、单行注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注释内容</span><br></pre></td></tr></table></figure><p>2、多行注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*注释内容</span><br><span class="line">注释内容</span><br><span class="line">注释内容*&#x2F;</span><br></pre></td></tr></table></figure><p>3、文档注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">*注释内容</span><br><span class="line">*注释内容</span><br><span class="line">*注释内容</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>IDEA/Eclipse 可以自动生成文档注释，根据 JDK 的 javadoc 工具来自动生成，直接显示到代码中。</p><p>javadoc 注释</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>@author</td><td>标识作者</td></tr><tr><td>@param</td><td>标识方法的参数</td></tr><tr><td>@renturn</td><td>标识方法的返回值</td></tr><tr><td>@version</td><td>标识版本</td></tr><tr><td>@since</td><td>标识从哪个版本开始引入</td></tr><tr><td>@see</td><td>标识参考的内容（相关的类有哪些）</td></tr></tbody></table><a id="more"></a><h1 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2.关键字"></a>2.关键字</h1><p>Java 语言预先定义好的，具有特殊意义的标识符（单词），是程序的核心组成。</p><p>Java 程序：关键字 + JDK类库 + 逻辑代码</p><p>关键字构建程序的主体框架</p><p>JDK 类库提供某些功能的调用</p><p>逻辑代码实现程序的业务逻辑的</p><p>IDEA 中橙色字体显示的都是关键字 public、static、int、void…</p><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>case</td><td>与switch组合使用，进行流程控制</td></tr><tr><td>catch</td><td>捕获异常</td></tr><tr><td>char</td><td>基本数据类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>continue</td><td>跳出循环</td></tr><tr><td>default</td><td>与switch组合使用，表示默认值</td></tr><tr><td>do</td><td>与while组合使用，表示循环</td></tr><tr><td>double</td><td>基本数据类型</td></tr><tr><td>else</td><td>与if组合使用，进行流程控制</td></tr><tr><td>enum</td><td>枚举类型，Java 中的一种特殊的类</td></tr><tr><td>extends</td><td>实现类的继承</td></tr><tr><td>final</td><td>修饰常量</td></tr><tr><td>finally</td><td>与try、catch搭配使用，处理异常</td></tr><tr><td>float</td><td>基本数据类型</td></tr><tr><td>for</td><td>循环</td></tr><tr><td>if</td><td>流程控制</td></tr><tr><td>implements</td><td>实现接口</td></tr><tr><td>import</td><td>引入某个类</td></tr><tr><td>int</td><td>基本数据类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>instanceof</td><td>判断对象的类型</td></tr><tr><td>long</td><td>基本数据类型</td></tr><tr><td>native</td><td>修饰本地方法</td></tr><tr><td>new</td><td>创建实例对象</td></tr><tr><td>package</td><td>表示包，用来组织 Java 类的</td></tr><tr><td>private</td><td>访问权限修饰符，表示私有</td></tr><tr><td>protected</td><td>访问权限修饰符，表示保护</td></tr><tr><td>public</td><td>访问权限修饰符，表示公开</td></tr><tr><td>return</td><td>表示方法的返回值</td></tr><tr><td>short</td><td>基本数据类型，短整型</td></tr><tr><td>static</td><td>静态修饰符</td></tr><tr><td>super</td><td>表示父类的成员</td></tr><tr><td>switch</td><td>流程控制，和case组合使用</td></tr><tr><td>synchronized</td><td>线程同步</td></tr><tr><td>this</td><td>表示调用当前实例对象的成员</td></tr><tr><td>throw</td><td>抛出异常，与 try、catch、finally 组合使用</td></tr><tr><td>throws</td><td>标识方法中可能抛出的异常</td></tr><tr><td>try</td><td>异常处理，与 catch、throw、finally 组合使用</td></tr><tr><td>void</td><td>表示当前方法没有返回值</td></tr><tr><td>volatile</td><td>确保主内存对所有线程可见</td></tr><tr><td>while</td><td>循环结构</td></tr></tbody></table><p>byte 和 bit 的区别？</p><p>1 byte（字节）  = 8 bit（一位二进制数 0/1）</p><p>100 Kb/s</p><p>1KB = 1024 byte</p><p>1MB = 1024 KB</p><p>1GB = 1024 MB</p><p>1TB = 1024 GB</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-注释&quot;&gt;&lt;a href=&quot;#1-注释&quot; class=&quot;headerlink&quot; title=&quot;1.注释&quot;&gt;&lt;/a&gt;1.注释&lt;/h1&gt;&lt;p&gt;帮助开发者更好地读懂代码，用&lt;strong&gt;通俗易懂&lt;/strong&gt;的语言对代码进行解释说明，方便自己和他人阅读。&lt;/p&gt;
&lt;p&gt;注释可以是编程思路，也可以是功能描述或者程序的作用，总之就是对代码的进一步阐述。&lt;/p&gt;
&lt;p&gt;注释是专门给程序员看的，计算机直接跳过。&lt;/p&gt;
&lt;p&gt;Java 中有几种注释？&lt;/p&gt;
&lt;p&gt;1、单行注释&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;注释内容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2、多行注释&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;*注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注释内容*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3、文档注释&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;IDEA/Eclipse 可以自动生成文档注释，根据 JDK 的 javadoc 工具来自动生成，直接显示到代码中。&lt;/p&gt;
&lt;p&gt;javadoc 注释&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;@author&lt;/td&gt;
&lt;td&gt;标识作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@param&lt;/td&gt;
&lt;td&gt;标识方法的参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@renturn&lt;/td&gt;
&lt;td&gt;标识方法的返回值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@version&lt;/td&gt;
&lt;td&gt;标识版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@since&lt;/td&gt;
&lt;td&gt;标识从哪个版本开始引入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@see&lt;/td&gt;
&lt;td&gt;标识参考的内容（相关的类有哪些）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM初步认识</title>
    <link href="https://xzso3o.github.io/2021/01/18/JVM%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"/>
    <id>https://xzso3o.github.io/2021/01/18/JVM%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/</id>
    <published>2021-01-18T12:48:58.000Z</published>
    <updated>2021-01-18T13:11:19.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JVM-指令"><a href="#1-JVM-指令" class="headerlink" title="1.JVM 指令"></a>1.JVM 指令</h1><p>class 文件中的程序的执行逻辑，java 文件中编写程序的逻辑，</p><p>JVM 对 class 文件的具体执行方式</p><p>1、写 Java 代码</p><p>2、编译成 class 字节码文件（16 进制，程序员根本看不懂）</p><p>3、对 class 字节码进行<strong>反汇编</strong>，成为程序员能看懂的 JVM 指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -c Test.java</span><br></pre></td></tr></table></figure><a id="more"></a><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"Test.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0                           <span class="comment">// 栈帧</span></span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span>                            <span class="comment">// 结束</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span>                  <span class="comment">//压栈</span></span><br><span class="line">       <span class="number">2</span>: istore_1                          <span class="comment">//把栈顶元素取出来赋给局部变量表第1个元素</span></span><br><span class="line">       <span class="number">3</span>: bipush        <span class="number">20</span>                  <span class="comment">//压栈</span></span><br><span class="line">       <span class="number">5</span>: istore_2                          <span class="comment">//把栈顶元素取出来赋给局部变量表第2个元素</span></span><br><span class="line">       <span class="number">6</span>: iload_1                           <span class="comment">//取出局部变量表第1个元素</span></span><br><span class="line">       <span class="number">7</span>: iload_2                           <span class="comment">//取出局部变量表第2个元素</span></span><br><span class="line">       <span class="number">8</span>: iadd                              <span class="comment">//进行相加操作，压栈</span></span><br><span class="line">       <span class="number">9</span>: istore_3                          <span class="comment">//把栈顶元素取出来赋给局部变量表第3个元素</span></span><br><span class="line">      10: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;  获取out静态实例</span><br><span class="line">      <span class="number">13</span>: iload_3                           <span class="comment">//取出局部变量表第3个元素</span></span><br><span class="line">      14: invokevirtual #13                 // Method java/io/PrintStream.println:(I)V</span><br><span class="line">      <span class="number">17</span>: <span class="keyword">return</span>                            <span class="comment">// 结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-JVM-内存模型"><a href="#2-JVM-内存模型" class="headerlink" title="2.JVM 内存模型"></a>2.JVM 内存模型</h1><p>JVM 可以分为 5 个部分</p><p>1、类加载器 Class Loader</p><p>2、<strong>运行时数据区 Runtime Data Area</strong></p><pre><code>- 方法区- 虚拟机栈- 本地方法栈- 堆- 程序计数器</code></pre><p>3、执行引擎 Execution Engine</p><p>4、本地库接口 Native Interface</p><p>5、本地方法库 Native Libraries</p><p><img src="/2021/01/18/JVM%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/1.png" alt="1603379698128"></p><p>运行时数据区：</p><p>1、方法区</p><p><strong>存储 JVM 加载的类信息，常量、静态变量。</strong></p><p>方法区是一种规范，永久代是方法区的一种实现。</p><p>面试题：JDK 7 之前的版本字符串常量池存放在永久代中的，JDK 7 将字符串常量池移动到了堆中，JDK 8 直接删除了永久代，改用<strong>元空间</strong>替代永久代。</p><p>2、本地方法栈</p><p>用来执行本地方法的</p><p>什么是 Java 的本地 native 方法？</p><p><strong>Java 是基于应用层的高级编程语言，无法访问操作系统底层信息。</strong></p><p><strong>就需要使用其他可以访问底层的编程语言来完成功能 C++，再通过 Java 来调用就可以实现需求。</strong></p><p>本地方法的使用原理：</p><p>1、在 Java 程序中声明 native 修饰的方法，只有方法定义，没有方法实现，将 Java 文件编译成字节码文件。</p><p>2、用 <strong>javah</strong> 编译字节码文件，生成一个后缀为 <strong>.h</strong> 的文件。</p><p>3、写一个 .cpp 文件实现 .h 文件中的方法。</p><p>4、将 .cpp 文件编译成<strong>动态链接库文件 .dll</strong>。</p><p>5、使用 System.loadLibrary() 加载动态链接库，从而实现本地的调用。</p><p>利用了<strong>反射机制</strong>，运行时找到 .dll 文件并解析，根据动态链接库中的文件名创建对象和方法，从而实现通过对象调用方法的过程。</p><p>常见的本地方法：</p><p>getClass、hashCode、clone 都是 Object 类中的方法。</p><p>3、程序计数器</p><p>占用内存空间较小，是<strong>当前线程所执行的字节码行号指示器</strong>（记录当前线程执行到哪了），多个线程之间的程序计数器是相互独立的，互不影响，为了保证每个线程恢复后都可以找到具体的执行位置。</p><p>（例：并发执行时，一个程序员一会写这台电脑代码，一会写另一台电脑代码，间断执行，停下写一台电脑代码时，靠程序计数器记下这个执行位置，等到又要写这台电脑代码时则可从该位置继续写代码）</p><p>4、Java 堆</p><p>Java 堆用来<strong>存储实例化对象</strong>的，Java 中所有的对象一定都是存储在堆中的，Java 堆<strong>被所有的线程共享</strong>，<strong>在虚拟机启动时创建的，用来存储对象的实例</strong>，是 Java 内存结构中的占比最大的一块区域，也是 GC 垃圾回收机制主要管理的区域，又可以分为年轻代、老年代。</p><blockquote><p>年轻代</p></blockquote><p>又分为 Eden（伊甸园），Survivor（存活）：Survivor From、Survivor To</p><p>Eden：对象刚被创建的时候，存放在 Eden 区，如果 Eden 区放不下，则放入 Survivor 中，甚至于放入到老年代中。</p><p>Survivor：Survivor 又可以分为 Survivor From  和 Survivor To，GC 回收时使用，将 Eden 中存活对象放入 Survivor From 中，下一次回收时，将 Survivor From 中存活的对象转移到 Survivor To 中，清除剩下的对象，下一次回收时，将 Survivor To 中存活的对象转移到 Survivor From 中，清除剩下的对象，下一次回收时，继续重复上述步骤…</p><p><img src="/2021/01/18/JVM%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/2.png" alt="1603639162176"></p><blockquote><p>老年代</p></blockquote><p>存放生命周期较长的对象，经过多次 GC 之后还没有被回收的，或者引用次数很多、或者引用链比较长的对象，都是存放在老年代中。</p><blockquote><p>元空间（元数据空间）MetaSpace</p></blockquote><p>JDK 8 之后开始将类的数据存放在堆内存中，这块区域叫做元空间，JDK 7 以前，元空间时放在永久代中的，JDK 8 之后永久代被删除了，元空间就独立出来了。</p><p>元空间和永久代是方法区的实现，方法区只是一种规范，永久代使用 JVM 内存，空间有限，元空间使用的是本地内存，使得程序的内存不再受限于 JVM 内存，本地内存有多少可以用，理论上元空间就有多大，解决了内存空间不足的问题。</p><p>5、虚拟机栈</p><p>Java 方法执行的内存模型，Java 栈中存放最多的是栈帧，每个栈帧对应一个被调用的方法，栈帧中包括：局部变量表、操作数栈、运算符栈、动态链接、方法的返回地址（方法出口）。</p><p>每一个方法的执行，JVM 都会创建一个栈帧，并且将该栈帧压入 Java 栈，方法执行完毕，该栈帧出栈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;成员变量&#x2F;类变量</span><br><span class="line">int m &#x3D; 10;</span><br><span class="line"></span><br><span class="line">public void test(int a)&#123;</span><br><span class="line">&#x2F;&#x2F;局部变量</span><br><span class="line">int i &#x3D; 10;</span><br><span class="line">int j &#x3D; 20;</span><br><span class="line">int k &#x3D; i + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void test2()&#123;</span><br><span class="line">int k &#x3D; 100;</span><br><span class="line">k &#x3D; k+1;</span><br><span class="line">test();</span><br><span class="line">m &#x3D; 11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/18/JVM%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/3.png" alt="1603639178292"></p><p>局部变量表：存储方法执行过程中的所有变量，包括方法中声明的局部变量和形参。</p><p>操作数栈：方法中的计算过程都是借助于操作数栈来完成的，将参与计算的数据压入到操作数栈中。</p><p>运算符栈：方法运算过程中用到的运算符，全部压入到运算符栈中。</p><p>方法返回地址：一个方法调用结束之后要返回到调用它的地方，所以栈帧中要保存能够返回到方法调用处的地址。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-JVM-指令&quot;&gt;&lt;a href=&quot;#1-JVM-指令&quot; class=&quot;headerlink&quot; title=&quot;1.JVM 指令&quot;&gt;&lt;/a&gt;1.JVM 指令&lt;/h1&gt;&lt;p&gt;class 文件中的程序的执行逻辑，java 文件中编写程序的逻辑，&lt;/p&gt;
&lt;p&gt;JVM 对 class 文件的具体执行方式&lt;/p&gt;
&lt;p&gt;1、写 Java 代码&lt;/p&gt;
&lt;p&gt;2、编译成 class 字节码文件（16 进制，程序员根本看不懂）&lt;/p&gt;
&lt;p&gt;3、对 class 字节码进行&lt;strong&gt;反汇编&lt;/strong&gt;，成为程序员能看懂的 JVM 指令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;javap -c Test.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java介绍</title>
    <link href="https://xzso3o.github.io/2021/01/18/Java%E4%BB%8B%E7%BB%8D/"/>
    <id>https://xzso3o.github.io/2021/01/18/Java%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-18T12:38:08.000Z</published>
    <updated>2021-01-18T13:11:06.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Java版本"><a href="#1-Java版本" class="headerlink" title="1.Java版本"></a>1.Java版本</h1><p>Java每隔半年会发布一个新版本，每第四个版本为稳定版本</p><p>稳定版 8、12、16</p><p>所以我们大部分使用Java8，十分稳定的版本</p><p>为什么要配环境变量？</p><p>让操作系统能够识别命令，java 可以</p><ul><li>1、在指定的路径下(C:\Program Files (x86)\Common Files\Oracle\Java\javapath)找可执行文件 java.exe</li><li>2、通过系统的环境变量来找到可执行文件</li></ul><p>第 1 种方式的优先级要高于第 2 种</p><p>Java 开发分为 3 个步骤：</p><ul><li>1、编写 Java 程序，在后缀为 .java 的文件中写代码，这个文件叫做 Java 源文件</li><li>2、通过 JVM 编译器将源文件编译为字节码文件，后缀 .class。记住这个是<strong>16 进制</strong>的</li><li>3、JVM 对字节码文件进行解释，翻译成操作系统能够识别的机器码（<strong>2 进 制</strong>），进而运行程序。</li></ul><p>Java 最大的特点就是它的跨平台特性，一次编写，多次运行（运行在不同 的操作系统中）</p><p>Windows、Mac、Linux </p><a id="more"></a><h1 id="2-Java体系"><a href="#2-Java体系" class="headerlink" title="2.Java体系"></a>2.Java体系</h1><p>Java SE、Java EE、Java ME</p><p><img src="/2021/01/18/Java%E4%BB%8B%E7%BB%8D/1.png" alt="1610973844232"></p><p>Java SE 定义了 Java 的<strong>核心类库</strong>，包含了各种常用的组件，是 Java 开发的 基础。</p><p>Java ME 是基于 Java SE 专用于<strong>移动端设备开发</strong>的一套组件，如手机、机顶 盒、车载导航。</p><p>Java EE Java Enterprise Edition 是基于 Java SE 扩展出的一套<strong>企业级开发组件</strong>，Java WEB 又是其中最主流、需求量最大的一套组件，包括 Servlet、JSP，是目前 Java 开发的主流方向。</p><h1 id="3-JDK"><a href="#3-JDK" class="headerlink" title="3.JDK"></a>3.JDK</h1><p>JRE   JDK</p><p>JRE (Java Runtime Environment Java) <strong>运行环境</strong>，包括 JVM 和 Java 基础类 库，一台电脑要运行 Java 程序，就必须安装 JRE，部署项目的服务器中需 要安装 JRE。</p><p>JDK Java Development Kit Java <strong>开发工具包</strong>，包括了 JRE 和编译 Java 源文 件的编译器，如果要在一台电脑上开发 Java 程序，就必须安装 JDK。</p><ul><li>1、编译程序的命令是 javac Test.java</li><li>2、运行程序的命令是 java Test</li><li>3、Java 对大小写敏感，编写时需要注意</li><li>4、文件名一定和类名一致</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Java版本&quot;&gt;&lt;a href=&quot;#1-Java版本&quot; class=&quot;headerlink&quot; title=&quot;1.Java版本&quot;&gt;&lt;/a&gt;1.Java版本&lt;/h1&gt;&lt;p&gt;Java每隔半年会发布一个新版本，每第四个版本为稳定版本&lt;/p&gt;
&lt;p&gt;稳定版 8、12、16&lt;/p&gt;
&lt;p&gt;所以我们大部分使用Java8，十分稳定的版本&lt;/p&gt;
&lt;p&gt;为什么要配环境变量？&lt;/p&gt;
&lt;p&gt;让操作系统能够识别命令，java 可以&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、在指定的路径下(C:\Program Files (x86)\Common Files\Oracle\Java\javapath)找可执行文件 java.exe&lt;/li&gt;
&lt;li&gt;2、通过系统的环境变量来找到可执行文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第 1 种方式的优先级要高于第 2 种&lt;/p&gt;
&lt;p&gt;Java 开发分为 3 个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、编写 Java 程序，在后缀为 .java 的文件中写代码，这个文件叫做 Java 源文件&lt;/li&gt;
&lt;li&gt;2、通过 JVM 编译器将源文件编译为字节码文件，后缀 .class。记住这个是&lt;strong&gt;16 进制&lt;/strong&gt;的&lt;/li&gt;
&lt;li&gt;3、JVM 对字节码文件进行解释，翻译成操作系统能够识别的机器码（&lt;strong&gt;2 进 制&lt;/strong&gt;），进而运行程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java 最大的特点就是它的跨平台特性，一次编写，多次运行（运行在不同 的操作系统中）&lt;/p&gt;
&lt;p&gt;Windows、Mac、Linux &lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
