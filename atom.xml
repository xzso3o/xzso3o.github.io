<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xzso3o.github.io/"/>
  <updated>2021-01-18T13:21:23.787Z</updated>
  <id>https://xzso3o.github.io/</id>
  
  <author>
    <name>xzs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>循环</title>
    <link href="https://xzso3o.github.io/2021/01/18/%E5%BE%AA%E7%8E%AF/"/>
    <id>https://xzso3o.github.io/2021/01/18/%E5%BE%AA%E7%8E%AF/</id>
    <published>2021-01-18T13:19:15.000Z</published>
    <updated>2021-01-18T13:21:23.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="while-循环和-do-while-循环的区别"><a href="#while-循环和-do-while-循环的区别" class="headerlink" title="while 循环和 do-while 循环的区别"></a>while 循环和 do-while 循环的区别</h1><p>do-while 循环会先执行一次循环体，再做判断（循环条件），决定是否进行下一次的循环，如果成立，则继续执行循环条，如果不成立，则跳出循环，所以至少会执行一次循环体。</p><p>while 先判断循环条件，再执行循环体，有可能一次都不执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"just do it"</span>);</span><br><span class="line">            num++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (num&lt;<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">while</span> (num&lt;<span class="number">90</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"just do it"</span>);</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="for-和-while、do-while-之间的区别"><a href="#for-和-while、do-while-之间的区别" class="headerlink" title="for 和 while、do-while 之间的区别"></a>for 和 while、do-while 之间的区别</h1><p>相同点：都遵循循环四要素。</p><p>不同点：</p><ul><li>while 和 do-while 适用于循环次数不确定的场景，for 适用于循环次数确定的场景。</li></ul><p>阻塞式方法</p><p>程序暂停，等待某一个操作，如果这个操作不执行，程序会一直暂停，直到该操作执行，才会继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//次数确定</span></span><br><span class="line">        <span class="comment">//Scanner 是 JDK 提供的一个对象，可以通过该对象获取用户输入的数据</span></span><br><span class="line"><span class="comment">//        System.out.print("请输入num的值：");</span></span><br><span class="line"><span class="comment">//        Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        int num = scanner.nextInt();</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; num; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(i);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//张三练习写代码 hello world，直到我满意为止</span></span><br><span class="line"><span class="comment">//        String result = "no";</span></span><br><span class="line"><span class="comment">//        Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        do &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("张三练习写代码 hello world");</span></span><br><span class="line"><span class="comment">//            System.out.print("你是否满意？yes/no:");</span></span><br><span class="line"><span class="comment">//            result = scanner.next();</span></span><br><span class="line"><span class="comment">//        &#125;while(result.equals("no"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        while(result.equals("no"))&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("张三练习写代码 hello world");</span></span><br><span class="line"><span class="comment">//            System.out.print("你是否满意？yes/no:");</span></span><br><span class="line"><span class="comment">//            result = scanner.next();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println("张三练习完毕");</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for 和 while 是先判断循环条件，再执行循环体；do-while 第一次是先执行，再判断循环条件。</li></ul><h1 id="双重循环"><a href="#双重循环" class="headerlink" title="双重循环"></a>双重循环</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">300</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span> ; i++) &#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/18/%E5%BE%AA%E7%8E%AF/1.png" alt="1610975904763"></p><p>像这种编程题就是找规律：</p><p>上半部分</p><p>第一行0：先打印 3 个空格，再打印 1 个数字</p><p>第二行1：先打印 2 个空格，再打印 2 个数字</p><p>第三行2：先打印 1 个空格，再打印 3 个数字</p><p>第四行3：先打印 0 个空格，再打印 4 个数字</p><p>行号从 0 开始，空格数 = 3 - 行号，数字个数 = 行号 + 1</p><p>下半部分</p><p>第一行0：先打印 1 个空格，再打印 3 个数字</p><p>第二行1：先打印 2 个空格，再打印 2 个数字</p><p>第三行2：先打印 3 个空格，再打印 1 个数字</p><p>行号从 0 开始，空格数 = 行号+1，数字个数 = 3 - 行号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//上半部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//打印空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>-j; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//打印数字</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt; <span class="number">2</span>*j+<span class="number">1</span>; i++) &#123;</span><br><span class="line">                System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下半部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//打印空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j+<span class="number">1</span>; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//打印数字</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>-j; i &lt; <span class="number">5</span>-<span class="number">2</span>*j; i++) &#123;</span><br><span class="line">                System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;while-循环和-do-while-循环的区别&quot;&gt;&lt;a href=&quot;#while-循环和-do-while-循环的区别&quot; class=&quot;headerlink&quot; title=&quot;while 循环和 do-while 循环的区别&quot;&gt;&lt;/a&gt;while 循环和 do-while 循环的区别&lt;/h1&gt;&lt;p&gt;do-while 循环会先执行一次循环体，再做判断（循环条件），决定是否进行下一次的循环，如果成立，则继续执行循环条，如果不成立，则跳出循环，所以至少会执行一次循环体。&lt;/p&gt;
&lt;p&gt;while 先判断循环条件，再执行循环体，有可能一次都不执行。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;just do it&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (num&amp;lt;&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (num&amp;lt;&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;just do it&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>数据类型转换、运算符和流程控制</title>
    <link href="https://xzso3o.github.io/2021/01/18/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://xzso3o.github.io/2021/01/18/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-01-18T13:13:03.000Z</published>
    <updated>2021-01-18T13:21:13.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据类型转换"><a href="#1-数据类型转换" class="headerlink" title="1.数据类型转换"></a>1.数据类型转换</h1><h2 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">        <span class="keyword">double</span> num2 = num1;</span><br><span class="line">        System.out.println(num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序会自动识别数据类型并完成转换，这种操作对数据类型是有要求的，并不是所有的数据类型都能完成自动转换。</p><p>1、整型转浮点型都可以，跟字节大小没有关系。</p><p>int  –&gt;  float/double</p><p>long  –&gt;  float/double</p><p>2、浮点型转整型，都无法完成，因为有精度损失，小数点后数值有丢失，对数据的描述不精准。</p><p>3、精度一样（都是整型/都是浮点型）的情况下，只能由低字节转为高字节，反之则不行。</p><h2 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h2><p>当自动转换不能实现的时候，我们可以通过强制手段进行转换，尽量不要强转，如果是基本数据类型，可能会有数据的精度损失，如果是引用类型，可能抛出类型转换异常。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> num1 = <span class="number">10.6f</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = (<span class="keyword">int</span>)num1;</span><br><span class="line">        System.out.println(num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        Cat cat = (Cat) animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h1><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>=，将 = 右边的值赋给等号左边，= 右边可以是具体数值，也可以是一个变量，= 左边一定是变量。</p><p>int num1 = 10；int num2 = 11;交换 num1 和 num2 的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">11</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        temp = num1;</span><br><span class="line">        num1 = num2;</span><br><span class="line">        num2 = temp;</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">        System.out.println(num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本算术运算符"><a href="#基本算术运算符" class="headerlink" title="基本算术运算符"></a>基本算术运算符</h2><p>+、-、*、/、++、–</p><p>num++，先执行，再+1</p><p>++num，先+1，再执行</p><h2 id="复合算术运算符"><a href="#复合算术运算符" class="headerlink" title="复合算术运算符"></a>复合算术运算符</h2><p>在基本算术运算符的基础上进行进一步的简化操作</p><p>+=、-=、*=、/=、%=</p><p>变量A += 变量B：先求出变量A+变量B的值，再将结果赋值给变量A</p><p>变量A = 变量A+变量B</p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>是用来计算一个表达式是否成立，boolean true/false</p><p>==、!=、&gt;、&lt;、&gt;=、&lt;=</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D; 只能用作数值类型的比较</span><br><span class="line">&#x3D;&#x3D;、!&#x3D; 所有类型都可以用</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>只能操作 boolen 类型的数据，判断 boolean 数据之间的逻辑关系，与、或、非</p><p>&amp;、|、！、&amp;&amp;（短路与）、||（短路或）</p><p>&amp;&amp; 和 &amp; 从结果上看没有区别，但是 &amp;&amp; 的效率更高。</p><p>&amp;/&amp;&amp; 两个操作数都为 true，结果为 true，否则为 false</p><p>|/|| 两个操作数只要有一个为 true，结果为 true，否则为 false</p><p>! 取反操作</p><p>&amp;&amp; 如果左边表达式为 false，则不执行右边的表达式，直接返回结果 false。</p><p>|| 如果左边表达式为 true，则不执行右边的表达式，直接返回结果 true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">11</span>;</span><br><span class="line">        System.out.println((num1++ == num2) &amp;&amp; (++num1 == num2));</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>三目运算符、三元表达式，执行赋值操作，根据不同的条件给同一个变量赋不同的值。</p><p>变量A = 条件？值1：值2</p><p>int num = 10==9?1:2</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>对操作数以二进制为单位进行运算，首先将操作数转为二进制，再进行运算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&amp; 按位与:每一位数字一一对应，如果都为1，则该位记作1，否则为0</span><br><span class="line"></span><br><span class="line">| 按位或:每一位数字一一对应，只要有一个为1，则改为记作1，否则为0</span><br><span class="line"></span><br><span class="line">^ 按位异或:每一位数字一一对应，相同记作0，不同记作1</span><br><span class="line"></span><br><span class="line">&lt;&lt; 左移:A&lt;&lt;B,A 乘以 2 的B次方</span><br><span class="line"></span><br><span class="line">&gt;&gt; 右移:A&gt;&gt;B,A 除以 2 的B次方</span><br></pre></td></tr></table></figure><h1 id="3-流程控制"><a href="#3-流程控制" class="headerlink" title="3.流程控制"></a>3.流程控制</h1><p>if-else 可以嵌套使用</p><ul><li>if 后面必须跟(条件)</li><li>else 后面不能根据(条件)</li><li>else 后面可以直接跟{}，也可以跟另外一个 if(条件)</li></ul><p>switch-case</p><p>功能上跟 if-else 是一致的，都是用来做流程控制的，区别在于 if-else 可以做等值判断、大于小于判断，switch-case 只能做等值判断。</p><p>同样做等值判断的情况下，switch-case 结构会比 if-else 更加清晰，有利于代码的可读性。</p><p>case 后面需要加 break</p><p>循环</p><p>for、while、do-while、foreach</p><p>循环四要素：</p><p>1、初始化循环变量</p><p>2、循环条件</p><p>3、循环体</p><p>4、更新循环变量</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-数据类型转换&quot;&gt;&lt;a href=&quot;#1-数据类型转换&quot; class=&quot;headerlink&quot; title=&quot;1.数据类型转换&quot;&gt;&lt;/a&gt;1.数据类型转换&lt;/h1&gt;&lt;h2 id=&quot;自动转换&quot;&gt;&lt;a href=&quot;#自动转换&quot; class=&quot;headerlink&quot; title=&quot;自动转换&quot;&gt;&lt;/a&gt;自动转换&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num1 = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(num1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; num2 = num1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(num2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;程序会自动识别数据类型并完成转换，这种操作对数据类型是有要求的，并不是所有的数据类型都能完成自动转换。&lt;/p&gt;
&lt;p&gt;1、整型转浮点型都可以，跟字节大小没有关系。&lt;/p&gt;
&lt;p&gt;int  –&amp;gt;  float/double&lt;/p&gt;
&lt;p&gt;long  –&amp;gt;  float/double&lt;/p&gt;
&lt;p&gt;2、浮点型转整型，都无法完成，因为有精度损失，小数点后数值有丢失，对数据的描述不精准。&lt;/p&gt;
&lt;p&gt;3、精度一样（都是整型/都是浮点型）的情况下，只能由低字节转为高字节，反之则不行。&lt;/p&gt;
&lt;h2 id=&quot;强制转换&quot;&gt;&lt;a href=&quot;#强制转换&quot; class=&quot;headerlink&quot; title=&quot;强制转换&quot;&gt;&lt;/a&gt;强制转换&lt;/h2&gt;&lt;p&gt;当自动转换不能实现的时候，我们可以通过强制手段进行转换，尽量不要强转，如果是基本数据类型，可能会有数据的精度损失，如果是引用类型，可能抛出类型转换异常。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>变量、数据类型</title>
    <link href="https://xzso3o.github.io/2021/01/18/%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://xzso3o.github.io/2021/01/18/%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-01-18T13:07:14.000Z</published>
    <updated>2021-01-18T13:12:19.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h1><h2 id="什么是变量？"><a href="#什么是变量？" class="headerlink" title="什么是变量？"></a>什么是变量？</h2><p>变量是计算机语言中的一个概念，可以表示一个具体的数值，同时这个值是可以改变的。</p><h2 id="为什么要使用变量？"><a href="#为什么要使用变量？" class="headerlink" title="为什么要使用变量？"></a>为什么要使用变量？</h2><p>100 元买了一款理财产品，年利率 3%，计算你年底的收益。</p><p>100</p><p>3%</p><p>乘法运算</p><p>1、需要在电脑中存储 100 和 3% 这两个数据。</p><p>2、将两个数据进行乘法运算。</p><p>计算机如何存储数据？</p><p>计算机将数据存储在内存中的，内存会为不同的数据开辟不同的空间来存储。</p><p><strong>每一块内存都有一个独一无二的地址</strong>，我们通过内存地址找到对应的内存，进而取出内存中存储的数据。</p><p>内存地址是一个十六进制的数据，0x6fff5cde3d6c</p><p><strong>内存地址不便于记忆，如何解决？通过变量解决</strong></p><p>因为内存地址不好记，我们就自定义一个好记的名字来代替内存地址，<strong>指向内存区域。</strong></p><a id="more"></a><h2 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h2><p>1、声明变量的数据类型和变量名（可以包含数字、字母、下划线、$，不能包含空格、运算符，不能用纯关键字来命名，不能以数字开头、大小写可以混用，驼峰式命名法：第一个单词全部小写，从第二个单词开始，首字母大写，后面全小写，userId、firstName、studentNum、studentSecondNum）</p><p>2、给内存空间赋值，这个值就是变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//100</span></span><br><span class="line">        <span class="comment">//1、开辟内存空间，int，变量名 num1</span></span><br><span class="line">        <span class="keyword">int</span> num1;</span><br><span class="line">        <span class="comment">//2、赋值</span></span><br><span class="line">        num1 = <span class="number">100</span>;</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Java-中的数据类型"><a href="#2-Java-中的数据类型" class="headerlink" title="2.Java 中的数据类型"></a>2.Java 中的数据类型</h1><h2 id="Java-基本数据类型"><a href="#Java-基本数据类型" class="headerlink" title="Java 基本数据类型"></a>Java 基本数据类型</h2><p>数值类型、非数值类型</p><table><thead><tr><th>基本数据类型</th><th>占用空间</th></tr></thead><tbody><tr><td>byte</td><td>1个字节（byte）8 bit</td></tr><tr><td>int</td><td>4个byte 32bit</td></tr><tr><td>short</td><td>2个byte 16bit</td></tr><tr><td>long</td><td>8个byte 64bit</td></tr><tr><td>float</td><td>4个byte 32bit</td></tr><tr><td>double</td><td>8个byte 64bit</td></tr><tr><td>char</td><td>2个byte 16bit</td></tr><tr><td>boolean</td><td>1 bit，1/8 byte</td></tr></tbody></table><p>int、double、boolean、String（引用类型）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ 既可以表示拼接也可以表示运算</span><br><span class="line">如果 + 左右两边至少有一边是字符串，就是拼接，将不是字符串的数据转成字符串，然后将两个字符串进行拼接</span><br><span class="line">否则就进行算术加法运算</span><br><span class="line">如果 + 左右两边是字符，而不是字符串，则不是拼接，将字符转为对应的 ASCII 码（数值），再进行加法运算</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">        String name = <span class="string">"张三"</span>;</span><br><span class="line">        System.out.println(<span class="string">"用户信息"</span>);</span><br><span class="line">        System.out.println(<span class="string">"编号："</span> + id);</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name);</span><br><span class="line">        System.out.println(<span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-变量&quot;&gt;&lt;a href=&quot;#1-变量&quot; class=&quot;headerlink&quot; title=&quot;1.变量&quot;&gt;&lt;/a&gt;1.变量&lt;/h1&gt;&lt;h2 id=&quot;什么是变量？&quot;&gt;&lt;a href=&quot;#什么是变量？&quot; class=&quot;headerlink&quot; title=&quot;什么是变量？&quot;&gt;&lt;/a&gt;什么是变量？&lt;/h2&gt;&lt;p&gt;变量是计算机语言中的一个概念，可以表示一个具体的数值，同时这个值是可以改变的。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用变量？&quot;&gt;&lt;a href=&quot;#为什么要使用变量？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用变量？&quot;&gt;&lt;/a&gt;为什么要使用变量？&lt;/h2&gt;&lt;p&gt;100 元买了一款理财产品，年利率 3%，计算你年底的收益。&lt;/p&gt;
&lt;p&gt;100&lt;/p&gt;
&lt;p&gt;3%&lt;/p&gt;
&lt;p&gt;乘法运算&lt;/p&gt;
&lt;p&gt;1、需要在电脑中存储 100 和 3% 这两个数据。&lt;/p&gt;
&lt;p&gt;2、将两个数据进行乘法运算。&lt;/p&gt;
&lt;p&gt;计算机如何存储数据？&lt;/p&gt;
&lt;p&gt;计算机将数据存储在内存中的，内存会为不同的数据开辟不同的空间来存储。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每一块内存都有一个独一无二的地址&lt;/strong&gt;，我们通过内存地址找到对应的内存，进而取出内存中存储的数据。&lt;/p&gt;
&lt;p&gt;内存地址是一个十六进制的数据，0x6fff5cde3d6c&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存地址不便于记忆，如何解决？通过变量解决&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为内存地址不好记，我们就自定义一个好记的名字来代替内存地址，&lt;strong&gt;指向内存区域。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>注释、关键词</title>
    <link href="https://xzso3o.github.io/2021/01/18/%E6%B3%A8%E9%87%8A%E3%80%81%E5%85%B3%E9%94%AE%E8%AF%8D/"/>
    <id>https://xzso3o.github.io/2021/01/18/%E6%B3%A8%E9%87%8A%E3%80%81%E5%85%B3%E9%94%AE%E8%AF%8D/</id>
    <published>2021-01-18T13:02:12.000Z</published>
    <updated>2021-01-18T13:04:51.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h1><p>帮助开发者更好地读懂代码，用<strong>通俗易懂</strong>的语言对代码进行解释说明，方便自己和他人阅读。</p><p>注释可以是编程思路，也可以是功能描述或者程序的作用，总之就是对代码的进一步阐述。</p><p>注释是专门给程序员看的，计算机直接跳过。</p><p>Java 中有几种注释？</p><p>1、单行注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注释内容</span><br></pre></td></tr></table></figure><p>2、多行注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*注释内容</span><br><span class="line">注释内容</span><br><span class="line">注释内容*&#x2F;</span><br></pre></td></tr></table></figure><p>3、文档注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">*注释内容</span><br><span class="line">*注释内容</span><br><span class="line">*注释内容</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>IDEA/Eclipse 可以自动生成文档注释，根据 JDK 的 javadoc 工具来自动生成，直接显示到代码中。</p><p>javadoc 注释</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>@author</td><td>标识作者</td></tr><tr><td>@param</td><td>标识方法的参数</td></tr><tr><td>@renturn</td><td>标识方法的返回值</td></tr><tr><td>@version</td><td>标识版本</td></tr><tr><td>@since</td><td>标识从哪个版本开始引入</td></tr><tr><td>@see</td><td>标识参考的内容（相关的类有哪些）</td></tr></tbody></table><a id="more"></a><h1 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2.关键字"></a>2.关键字</h1><p>Java 语言预先定义好的，具有特殊意义的标识符（单词），是程序的核心组成。</p><p>Java 程序：关键字 + JDK类库 + 逻辑代码</p><p>关键字构建程序的主体框架</p><p>JDK 类库提供某些功能的调用</p><p>逻辑代码实现程序的业务逻辑的</p><p>IDEA 中橙色字体显示的都是关键字 public、static、int、void…</p><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>abstract</td><td>抽象类</td></tr><tr><td>boolean</td><td>基本数据类型</td></tr><tr><td>break</td><td>跳出循环</td></tr><tr><td>byte</td><td>基本数据类型</td></tr></tbody></table><p>byte 和 bit 的区别？</p><p>1 byte（字节）  = 8 bit（一位二进制数 0/1）</p><p>100 Kb/s</p><p>1KB = 1024 byte</p><p>1MB = 1024 KB</p><p>1GB = 1024 MB</p><p>1TB = 1024 GB</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-注释&quot;&gt;&lt;a href=&quot;#1-注释&quot; class=&quot;headerlink&quot; title=&quot;1.注释&quot;&gt;&lt;/a&gt;1.注释&lt;/h1&gt;&lt;p&gt;帮助开发者更好地读懂代码，用&lt;strong&gt;通俗易懂&lt;/strong&gt;的语言对代码进行解释说明，方便自己和他人阅读。&lt;/p&gt;
&lt;p&gt;注释可以是编程思路，也可以是功能描述或者程序的作用，总之就是对代码的进一步阐述。&lt;/p&gt;
&lt;p&gt;注释是专门给程序员看的，计算机直接跳过。&lt;/p&gt;
&lt;p&gt;Java 中有几种注释？&lt;/p&gt;
&lt;p&gt;1、单行注释&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;注释内容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2、多行注释&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;*注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注释内容*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3、文档注释&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;IDEA/Eclipse 可以自动生成文档注释，根据 JDK 的 javadoc 工具来自动生成，直接显示到代码中。&lt;/p&gt;
&lt;p&gt;javadoc 注释&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;@author&lt;/td&gt;
&lt;td&gt;标识作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@param&lt;/td&gt;
&lt;td&gt;标识方法的参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@renturn&lt;/td&gt;
&lt;td&gt;标识方法的返回值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@version&lt;/td&gt;
&lt;td&gt;标识版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@since&lt;/td&gt;
&lt;td&gt;标识从哪个版本开始引入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@see&lt;/td&gt;
&lt;td&gt;标识参考的内容（相关的类有哪些）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM初步认识</title>
    <link href="https://xzso3o.github.io/2021/01/18/JVM%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"/>
    <id>https://xzso3o.github.io/2021/01/18/JVM%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/</id>
    <published>2021-01-18T12:48:58.000Z</published>
    <updated>2021-01-18T13:11:19.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JVM-指令"><a href="#1-JVM-指令" class="headerlink" title="1.JVM 指令"></a>1.JVM 指令</h1><p>class 文件中的程序的执行逻辑，java 文件中编写程序的逻辑，</p><p>JVM 对 class 文件的具体执行方式</p><p>1、写 Java 代码</p><p>2、编译成 class 字节码文件（16 进制，程序员根本看不懂）</p><p>3、对 class 字节码进行<strong>反汇编</strong>，成为程序员能看懂的 JVM 指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -c Test.java</span><br></pre></td></tr></table></figure><a id="more"></a><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"Test.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0                           <span class="comment">// 栈帧</span></span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span>                            <span class="comment">// 结束</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span>                  <span class="comment">//压栈</span></span><br><span class="line">       <span class="number">2</span>: istore_1                          <span class="comment">//把栈顶元素取出来赋给局部变量表第1个元素</span></span><br><span class="line">       <span class="number">3</span>: bipush        <span class="number">20</span>                  <span class="comment">//压栈</span></span><br><span class="line">       <span class="number">5</span>: istore_2                          <span class="comment">//把栈顶元素取出来赋给局部变量表第2个元素</span></span><br><span class="line">       <span class="number">6</span>: iload_1                           <span class="comment">//取出局部变量表第1个元素</span></span><br><span class="line">       <span class="number">7</span>: iload_2                           <span class="comment">//取出局部变量表第2个元素</span></span><br><span class="line">       <span class="number">8</span>: iadd                              <span class="comment">//进行相加操作，压栈</span></span><br><span class="line">       <span class="number">9</span>: istore_3                          <span class="comment">//把栈顶元素取出来赋给局部变量表第3个元素</span></span><br><span class="line">      10: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;  获取out静态实例</span><br><span class="line">      <span class="number">13</span>: iload_3                           <span class="comment">//取出局部变量表第3个元素</span></span><br><span class="line">      14: invokevirtual #13                 // Method java/io/PrintStream.println:(I)V</span><br><span class="line">      <span class="number">17</span>: <span class="keyword">return</span>                            <span class="comment">// 结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-JVM-内存模型"><a href="#2-JVM-内存模型" class="headerlink" title="2.JVM 内存模型"></a>2.JVM 内存模型</h1><p>JVM 可以分为 5 个部分</p><p>1、类加载器 Class Loader</p><p>2、<strong>运行时数据区 Runtime Data Area</strong></p><pre><code>- 方法区- 虚拟机栈- 本地方法栈- 堆- 程序计数器</code></pre><p>3、执行引擎 Execution Engine</p><p>4、本地库接口 Native Interface</p><p>5、本地方法库 Native Libraries</p><p><img src="/2021/01/18/JVM%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/1.png" alt="1603379698128"></p><p>运行时数据区：</p><p>1、方法区</p><p><strong>存储 JVM 加载的类信息，常量、静态变量。</strong></p><p>方法区是一种规范，永久代是方法区的一种实现。</p><p>面试题：JDK 7 之前的版本字符串常量池存放在永久代中的，JDK 7 将字符串常量池移动到了堆中，JDK 8 直接删除了永久代，改用<strong>元空间</strong>替代永久代。</p><p>2、本地方法栈</p><p>用来执行本地方法的</p><p>什么是 Java 的本地 native 方法？</p><p><strong>Java 是基于应用层的高级编程语言，无法访问操作系统底层信息。</strong></p><p><strong>就需要使用其他可以访问底层的编程语言来完成功能 C++，再通过 Java 来调用就可以实现需求。</strong></p><p>本地方法的使用原理：</p><p>1、在 Java 程序中声明 native 修饰的方法，只有方法定义，没有方法实现，将 Java 文件编译成字节码文件。</p><p>2、用 <strong>javah</strong> 编译字节码文件，生成一个后缀为 <strong>.h</strong> 的文件。</p><p>3、写一个 .cpp 文件实现 .h 文件中的方法。</p><p>4、将 .cpp 文件编译成<strong>动态链接库文件 .dll</strong>。</p><p>5、使用 System.loadLibrary() 加载动态链接库，从而实现本地的调用。</p><p>利用了<strong>反射机制</strong>，运行时找到 .dll 文件并解析，根据动态链接库中的文件名创建对象和方法，从而实现通过对象调用方法的过程。</p><p>常见的本地方法：</p><p>getClass、hashCode、clone 都是 Object 类中的方法。</p><p>3、程序计数器</p><p>占用内存空间较小，是<strong>当前线程所执行的字节码行号指示器</strong>（记录当前线程执行到哪了），多个线程之间的程序计数器是相互独立的，互不影响，为了保证每个线程恢复后都可以找到具体的执行位置。</p><p>（例：并发执行时，一个程序员一会写这台电脑代码，一会写另一台电脑代码，间断执行，停下写一台电脑代码时，靠程序计数器记下这个执行位置，等到又要写这台电脑代码时则可从该位置继续写代码）</p><p>4、Java 堆</p><p>Java 堆用来<strong>存储实例化对象</strong>的，Java 中所有的对象一定都是存储在堆中的，Java 堆<strong>被所有的线程共享</strong>，<strong>在虚拟机启动时创建的，用来存储对象的实例</strong>，是 Java 内存结构中的占比最大的一块区域，也是 GC 垃圾回收机制主要管理的区域，又可以分为年轻代、老年代。</p><blockquote><p>年轻代</p></blockquote><p>又分为 Eden（伊甸园），Survivor（存活）：Survivor From、Survivor To</p><p>Eden：对象刚被创建的时候，存放在 Eden 区，如果 Eden 区放不下，则放入 Survivor 中，甚至于放入到老年代中。</p><p>Survivor：Survivor 又可以分为 Survivor From  和 Survivor To，GC 回收时使用，将 Eden 中存活对象放入 Survivor From 中，下一次回收时，将 Survivor From 中存活的对象转移到 Survivor To 中，清除剩下的对象，下一次回收时，将 Survivor To 中存活的对象转移到 Survivor From 中，清除剩下的对象，下一次回收时，继续重复上述步骤…</p><p><img src="/2021/01/18/JVM%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/2.png" alt="1603639162176"></p><blockquote><p>老年代</p></blockquote><p>存放生命周期较长的对象，经过多次 GC 之后还没有被回收的，或者引用次数很多、或者引用链比较长的对象，都是存放在老年代中。</p><blockquote><p>元空间（元数据空间）MetaSpace</p></blockquote><p>JDK 8 之后开始将类的数据存放在堆内存中，这块区域叫做元空间，JDK 7 以前，元空间时放在永久代中的，JDK 8 之后永久代被删除了，元空间就独立出来了。</p><p>元空间和永久代是方法区的实现，方法区只是一种规范，永久代使用 JVM 内存，空间有限，元空间使用的是本地内存，使得程序的内存不再受限于 JVM 内存，本地内存有多少可以用，理论上元空间就有多大，解决了内存空间不足的问题。</p><p>5、虚拟机栈</p><p>Java 方法执行的内存模型，Java 栈中存放最多的是栈帧，每个栈帧对应一个被调用的方法，栈帧中包括：局部变量表、操作数栈、运算符栈、动态链接、方法的返回地址（方法出口）。</p><p>每一个方法的执行，JVM 都会创建一个栈帧，并且将该栈帧压入 Java 栈，方法执行完毕，该栈帧出栈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;成员变量&#x2F;类变量</span><br><span class="line">int m &#x3D; 10;</span><br><span class="line"></span><br><span class="line">public void test(int a)&#123;</span><br><span class="line">&#x2F;&#x2F;局部变量</span><br><span class="line">int i &#x3D; 10;</span><br><span class="line">int j &#x3D; 20;</span><br><span class="line">int k &#x3D; i + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void test2()&#123;</span><br><span class="line">int k &#x3D; 100;</span><br><span class="line">k &#x3D; k+1;</span><br><span class="line">test();</span><br><span class="line">m &#x3D; 11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/18/JVM%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/3.png" alt="1603639178292"></p><p>局部变量表：存储方法执行过程中的所有变量，包括方法中声明的局部变量和形参。</p><p>操作数栈：方法中的计算过程都是借助于操作数栈来完成的，将参与计算的数据压入到操作数栈中。</p><p>运算符栈：方法运算过程中用到的运算符，全部压入到运算符栈中。</p><p>方法返回地址：一个方法调用结束之后要返回到调用它的地方，所以栈帧中要保存能够返回到方法调用处的地址。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-JVM-指令&quot;&gt;&lt;a href=&quot;#1-JVM-指令&quot; class=&quot;headerlink&quot; title=&quot;1.JVM 指令&quot;&gt;&lt;/a&gt;1.JVM 指令&lt;/h1&gt;&lt;p&gt;class 文件中的程序的执行逻辑，java 文件中编写程序的逻辑，&lt;/p&gt;
&lt;p&gt;JVM 对 class 文件的具体执行方式&lt;/p&gt;
&lt;p&gt;1、写 Java 代码&lt;/p&gt;
&lt;p&gt;2、编译成 class 字节码文件（16 进制，程序员根本看不懂）&lt;/p&gt;
&lt;p&gt;3、对 class 字节码进行&lt;strong&gt;反汇编&lt;/strong&gt;，成为程序员能看懂的 JVM 指令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;javap -c Test.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java介绍</title>
    <link href="https://xzso3o.github.io/2021/01/18/Java%E4%BB%8B%E7%BB%8D/"/>
    <id>https://xzso3o.github.io/2021/01/18/Java%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-18T12:38:08.000Z</published>
    <updated>2021-01-18T13:11:06.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Java版本"><a href="#1-Java版本" class="headerlink" title="1.Java版本"></a>1.Java版本</h1><p>Java每隔半年会发布一个新版本，每第四个版本为稳定版本</p><p>稳定版 8、12、16</p><p>所以我们大部分使用Java8，十分稳定的版本</p><p>为什么要配环境变量？</p><p>让操作系统能够识别命令，java 可以</p><ul><li>1、在指定的路径下(C:\Program Files (x86)\Common Files\Oracle\Java\javapath)找可执行文件 java.exe</li><li>2、通过系统的环境变量来找到可执行文件</li></ul><p>第 1 种方式的优先级要高于第 2 种</p><p>Java 开发分为 3 个步骤：</p><ul><li>1、编写 Java 程序，在后缀为 .java 的文件中写代码，这个文件叫做 Java 源文件</li><li>2、通过 JVM 编译器将源文件编译为字节码文件，后缀 .class。记住这个是<strong>16 进制</strong>的</li><li>3、JVM 对字节码文件进行解释，翻译成操作系统能够识别的机器码（<strong>2 进 制</strong>），进而运行程序。</li></ul><p>Java 最大的特点就是它的跨平台特性，一次编写，多次运行（运行在不同 的操作系统中）</p><p>Windows、Mac、Linux </p><a id="more"></a><h1 id="2-Java体系"><a href="#2-Java体系" class="headerlink" title="2.Java体系"></a>2.Java体系</h1><p>Java SE、Java EE、Java ME</p><p><img src="/2021/01/18/Java%E4%BB%8B%E7%BB%8D/1.png" alt="1610973844232"></p><p>Java SE 定义了 Java 的<strong>核心类库</strong>，包含了各种常用的组件，是 Java 开发的 基础。</p><p>Java ME 是基于 Java SE 专用于<strong>移动端设备开发</strong>的一套组件，如手机、机顶 盒、车载导航。</p><p>Java EE Java Enterprise Edition 是基于 Java SE 扩展出的一套<strong>企业级开发组件</strong>，Java WEB 又是其中最主流、需求量最大的一套组件，包括 Servlet、JSP，是目前 Java 开发的主流方向。</p><h1 id="3-JDK"><a href="#3-JDK" class="headerlink" title="3.JDK"></a>3.JDK</h1><p>JRE   JDK</p><p>JRE (Java Runtime Environment Java) <strong>运行环境</strong>，包括 JVM 和 Java 基础类 库，一台电脑要运行 Java 程序，就必须安装 JRE，部署项目的服务器中需 要安装 JRE。</p><p>JDK Java Development Kit Java <strong>开发工具包</strong>，包括了 JRE 和编译 Java 源文 件的编译器，如果要在一台电脑上开发 Java 程序，就必须安装 JDK。</p><ul><li>1、编译程序的命令是 javac Test.java</li><li>2、运行程序的命令是 java Test</li><li>3、Java 对大小写敏感，编写时需要注意</li><li>4、文件名一定和类名一致</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Java版本&quot;&gt;&lt;a href=&quot;#1-Java版本&quot; class=&quot;headerlink&quot; title=&quot;1.Java版本&quot;&gt;&lt;/a&gt;1.Java版本&lt;/h1&gt;&lt;p&gt;Java每隔半年会发布一个新版本，每第四个版本为稳定版本&lt;/p&gt;
&lt;p&gt;稳定版 8、12、16&lt;/p&gt;
&lt;p&gt;所以我们大部分使用Java8，十分稳定的版本&lt;/p&gt;
&lt;p&gt;为什么要配环境变量？&lt;/p&gt;
&lt;p&gt;让操作系统能够识别命令，java 可以&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、在指定的路径下(C:\Program Files (x86)\Common Files\Oracle\Java\javapath)找可执行文件 java.exe&lt;/li&gt;
&lt;li&gt;2、通过系统的环境变量来找到可执行文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第 1 种方式的优先级要高于第 2 种&lt;/p&gt;
&lt;p&gt;Java 开发分为 3 个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、编写 Java 程序，在后缀为 .java 的文件中写代码，这个文件叫做 Java 源文件&lt;/li&gt;
&lt;li&gt;2、通过 JVM 编译器将源文件编译为字节码文件，后缀 .class。记住这个是&lt;strong&gt;16 进制&lt;/strong&gt;的&lt;/li&gt;
&lt;li&gt;3、JVM 对字节码文件进行解释，翻译成操作系统能够识别的机器码（&lt;strong&gt;2 进 制&lt;/strong&gt;），进而运行程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java 最大的特点就是它的跨平台特性，一次编写，多次运行（运行在不同 的操作系统中）&lt;/p&gt;
&lt;p&gt;Windows、Mac、Linux &lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://xzso3o.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud Alibaba-Seata</title>
    <link href="https://xzso3o.github.io/2020/12/21/SpringCloud-Alibaba-Seata/"/>
    <id>https://xzso3o.github.io/2020/12/21/SpringCloud-Alibaba-Seata/</id>
    <published>2020-12-21T05:00:13.000Z</published>
    <updated>2020-12-21T12:16:50.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Seata处理分布式事务"><a href="#Seata处理分布式事务" class="headerlink" title="Seata处理分布式事务"></a>Seata处理分布式事务</h3><h4 id="一、问题的提出："><a href="#一、问题的提出：" class="headerlink" title="一、问题的提出："></a>一、问题的提出：</h4><p><img src="/2020/12/21/SpringCloud-Alibaba-Seata/1.png" alt="01"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Seata/6.png" alt="1602508607972"></p><a id="more"></a> <h4 id="二、Seata术语："><a href="#二、Seata术语：" class="headerlink" title="二、Seata术语："></a>二、Seata术语：</h4><p><img src="/2020/12/21/SpringCloud-Alibaba-Seata/2.png" alt="02"></p><h4 id="三、处理过程："><a href="#三、处理过程：" class="headerlink" title="三、处理过程："></a>三、处理过程：</h4><p><img src="/2020/12/21/SpringCloud-Alibaba-Seata/3.png" alt="3"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Seata/4.png" alt="4"></p><h4 id="四、业务说明"><a href="#四、业务说明" class="headerlink" title="四、业务说明"></a>四、业务说明</h4><p><img src="/2020/12/21/SpringCloud-Alibaba-Seata/5.png" alt="5"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Seata处理分布式事务&quot;&gt;&lt;a href=&quot;#Seata处理分布式事务&quot; class=&quot;headerlink&quot; title=&quot;Seata处理分布式事务&quot;&gt;&lt;/a&gt;Seata处理分布式事务&lt;/h3&gt;&lt;h4 id=&quot;一、问题的提出：&quot;&gt;&lt;a href=&quot;#一、问题的提出：&quot; class=&quot;headerlink&quot; title=&quot;一、问题的提出：&quot;&gt;&lt;/a&gt;一、问题的提出：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2020/12/21/SpringCloud-Alibaba-Seata/1.png&quot; alt=&quot;01&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/21/SpringCloud-Alibaba-Seata/6.png&quot; alt=&quot;1602508607972&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://xzso3o.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud Alibaba-Sentinel</title>
    <link href="https://xzso3o.github.io/2020/12/21/SpringCloud-Alibaba-Sentinel/"/>
    <id>https://xzso3o.github.io/2020/12/21/SpringCloud-Alibaba-Sentinel/</id>
    <published>2020-12-21T04:59:16.000Z</published>
    <updated>2020-12-21T12:17:04.546Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Sentinel实现熔断与限流"><a href="#Sentinel实现熔断与限流" class="headerlink" title="Sentinel实现熔断与限流"></a>Sentinel实现熔断与限流</h3><p>面对云原生微服务的流量控制、熔断降级组件</p><p>分布式系统的流量防卫兵，取代了Hystrix</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/1.png" alt="1"></p><h4 id="一、运行"><a href="#一、运行" class="headerlink" title="一、运行"></a>一、运行</h4><p>java -jar sentinel-dashboard-1.7.2.jar</p><p>访问<a href="http://localhost:8080即可出现可视化界面">http://localhost:8080即可出现可视化界面</a></p><p>用户名密码都是sentinel</p><a id="more"></a> <h4 id="二、初次使用"><a href="#二、初次使用" class="headerlink" title="二、初次使用"></a>二、初次使用</h4><p>主要配好YML文件即可使用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/2.png" alt="2"></p><h4 id="三、Sentinel流控"><a href="#三、Sentinel流控" class="headerlink" title="三、Sentinel流控"></a>三、Sentinel流控</h4><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/3.png" alt="3"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/4.png" alt="4"></p><p>预热</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/5.png" alt="5"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/6.png" alt="6"></p><p>排队等待</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/7.png" alt="7"></p><h4 id="四、Sentinel降级"><a href="#四、Sentinel降级" class="headerlink" title="四、Sentinel降级"></a>四、Sentinel降级</h4><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/8.png" alt="8"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/9.png" alt="9"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/10.png" alt="10"></p><p>1.RT（平均响应时间）</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/11.png" alt="11"></p><p>2.异常比例</p><p>异常超过一定比例就跳闸</p><p>3.异常数</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/12.png" alt="12"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/13.png" alt="13"></p><h4 id="五、Sentinel热点Key限流"><a href="#五、Sentinel热点Key限流" class="headerlink" title="五、Sentinel热点Key限流"></a>五、Sentinel热点Key限流</h4><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/14.png" alt="14"></p><p>@SentunelResource对Sentinel控制台里的热点规则负责，只要服务违背了配置规则，则会调用下面的兜底方法</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/15.png" alt="15"></p><p>当索引为0的参数（即p1）单机阈值（一秒点击率）超过了1，则调用兜底方法，而参数p2随便快速点击多少次也没事</p><p>特殊情况：</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/16.png" alt="16"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/17.png" alt="17"></p><h4 id="六、Sentinel系统规则"><a href="#六、Sentinel系统规则" class="headerlink" title="六、Sentinel系统规则"></a>六、Sentinel系统规则</h4><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/18.png" alt="18"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/19.png" alt="19"></p><p>系统全局的保护规则</p><h4 id="七、-SentinelResource配置"><a href="#七、-SentinelResource配置" class="headerlink" title="七、@SentinelResource配置"></a>七、@SentinelResource配置</h4><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/20.png" alt="1602498555342"></p><p>对customerBlockHandler进行限流，一旦超出限制，则交由blockHandlerClass里的blockHandler进行兜底</p><p>blockHandlerClass里就可以写好几个blockHandler来进行兜底</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/21.png" alt="1602498686863"></p><p>即</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/22.png" alt="1602498766708"></p><h4 id="八、Sentinel服务熔断"><a href="#八、Sentinel服务熔断" class="headerlink" title="八、Sentinel服务熔断"></a>八、Sentinel服务熔断</h4><p>没有配置：</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/23.png" alt="1602500010113"></p><p>只配置fallback，fallback只负责业务java异常：</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/24.png" alt="1602500084574"></p><p>只配置blockHandler，只负责sentinal控制台配置违规：</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/25.png" alt="1602500224788"></p><p>fallback和blockHandler都配置：</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/26.png" alt="1602500512750"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Sentinel/27.png" alt="1602500639919"></p><p>blockHandler大于fallback</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Sentinel实现熔断与限流&quot;&gt;&lt;a href=&quot;#Sentinel实现熔断与限流&quot; class=&quot;headerlink&quot; title=&quot;Sentinel实现熔断与限流&quot;&gt;&lt;/a&gt;Sentinel实现熔断与限流&lt;/h3&gt;&lt;p&gt;面对云原生微服务的流量控制、熔断降级组件&lt;/p&gt;
&lt;p&gt;分布式系统的流量防卫兵，取代了Hystrix&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/21/SpringCloud-Alibaba-Sentinel/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;一、运行&quot;&gt;&lt;a href=&quot;#一、运行&quot; class=&quot;headerlink&quot; title=&quot;一、运行&quot;&gt;&lt;/a&gt;一、运行&lt;/h4&gt;&lt;p&gt;java -jar sentinel-dashboard-1.7.2.jar&lt;/p&gt;
&lt;p&gt;访问&lt;a href=&quot;http://localhost:8080即可出现可视化界面&quot;&gt;http://localhost:8080即可出现可视化界面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户名密码都是sentinel&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://xzso3o.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud Alibaba-Nacos</title>
    <link href="https://xzso3o.github.io/2020/12/21/SpringCloud-Alibaba-Nacos/"/>
    <id>https://xzso3o.github.io/2020/12/21/SpringCloud-Alibaba-Nacos/</id>
    <published>2020-12-21T04:57:48.000Z</published>
    <updated>2020-12-21T12:16:36.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h3><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/1.png" alt="01"></p><h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><p>一句话，等价于Eureka+Config+Bus</p><p>Nacos自带负载均衡，且支持AP和CP‘<a id="more"></a> </p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/2.png" alt="02"></p><h4 id="一、服务提供者"><a href="#一、服务提供者" class="headerlink" title="一、服务提供者"></a>一、服务提供者</h4><p>1.nacos/bin/startup.cmd启动nacos</p><p>2.写POM</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--SpringCloud ailibaba nacos --&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>3.写YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line">        <span class="comment"># 换成nginx的1111端口，做集群</span></span><br><span class="line"><span class="comment">#        server-addr: 192.168.111.144:1111</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><p>4.启动类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span>   <span class="comment">//不再需要@EnableEurekaClint等注解</span></span><br></pre></td></tr></table></figure><h4 id="二、服务消费者"><a href="#二、服务消费者" class="headerlink" title="二、服务消费者"></a>二、服务消费者</h4><p>1.写POM</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!--SpringCloud</span> <span class="string">ailibaba</span> <span class="string">nacos</span> <span class="string">--&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p>2.写YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure><p>3.启动类上写注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><h4 id="三、Nacos服务配置中心"><a href="#三、Nacos服务配置中心" class="headerlink" title="三、Nacos服务配置中心"></a>三、Nacos服务配置中心</h4><p>1.写POM</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--nacos-config--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--nacos-discovery--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.写application.yml和bootstrap.yml</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/3.png" alt="03"></p><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 表示开发环境</span></span><br><span class="line">    <span class="comment">#active: test # 表示测试环境</span></span><br><span class="line">    <span class="comment">#active: info</span></span><br></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line"><span class="comment">#        group: DEV_GROUP</span></span><br><span class="line"><span class="comment">#        namespace: 7d8f0f5a-6a53-4785-9686-dd460158e5d4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line"><span class="comment"># nacos-config-client-dev.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos-config-client-test.yaml   ----&gt; config.info</span></span><br></pre></td></tr></table></figure><p>3.在nacos页面添加配置</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/4.png" alt="04"></p><p>Data ID需要固定设置</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/5.png" alt="05"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/6.png" alt="06"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/7.png" alt="07"></p><p>三大配置：Data ID、Group、NameSpace</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/8.png" alt="08"></p><p>4.Data ID：根据spring.profiles.active里的配置进行加载nacos上的配置</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/9.png" alt="09"></p><p>5.Group:  默认加载默认组，加载特定组只需要在config下添加一条group即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br></pre></td></tr></table></figure><p>即若当前active: info，则会加载DEV_GROUP组下的nacos-config-client-info.yaml</p><p>6.NameSpace</p><p>默认命名空间即在public下</p><p>每个命名空间都有特定的ID</p><p>访问命名空间则需要再添加一条yml，并添加要读取配置的命名空间ID</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">TEST_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">20ffe5ef-79bb-4048-aaa9-5920c61f5761</span></span><br></pre></td></tr></table></figure><p>该配置则去寻找命名空间ID为20ffe5ef-79bb-4048-aaa9-5920c61f5761的空间下，TEST_GROUP的nacos-config-client-dev.yaml（application.yml里是active:dev）</p><h4 id="四、Nacos集群和持久化配置（重要）"><a href="#四、Nacos集群和持久化配置（重要）" class="headerlink" title="四、Nacos集群和持久化配置（重要）"></a>四、Nacos集群和持久化配置（重要）</h4><p>1.Nacos集群架构</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/10.png" alt="10"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/11.png" alt="11"></p><p>2.Nacos内嵌数据库derby存储配置，所以要进行切换数据库derby到我们本地数据库MySQL</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/12.png" alt="12"></p><p>3.</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/13.png" alt="13"></p><p>4.服务端访问nginx的端口，nginx里配置好映射，映射到三台nacos上</p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/14.png" alt="14"></p><p><img src="/2020/12/21/SpringCloud-Alibaba-Nacos/15.png" alt="15"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SpringCloud-Alibaba&quot;&gt;&lt;a href=&quot;#SpringCloud-Alibaba&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud Alibaba&quot;&gt;&lt;/a&gt;SpringCloud Alibaba&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/12/21/SpringCloud-Alibaba-Nacos/1.png&quot; alt=&quot;01&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Nacos&quot;&gt;&lt;a href=&quot;#Nacos&quot; class=&quot;headerlink&quot; title=&quot;Nacos&quot;&gt;&lt;/a&gt;Nacos&lt;/h3&gt;&lt;p&gt;一句话，等价于Eureka+Config+Bus&lt;/p&gt;
&lt;p&gt;Nacos自带负载均衡，且支持AP和CP‘&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://xzso3o.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud Sleuth分布式请求链路跟踪</title>
    <link href="https://xzso3o.github.io/2020/12/21/SpringCloud-Sleuth%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%B7%E6%B1%82%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/"/>
    <id>https://xzso3o.github.io/2020/12/21/SpringCloud-Sleuth%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%B7%E6%B1%82%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/</id>
    <published>2020-12-21T04:55:47.000Z</published>
    <updated>2020-12-21T12:17:19.249Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringCloud-Sleuth分布式请求链路跟踪（链路监控）"><a href="#SpringCloud-Sleuth分布式请求链路跟踪（链路监控）" class="headerlink" title="SpringCloud Sleuth分布式请求链路跟踪（链路监控）"></a>SpringCloud Sleuth分布式请求链路跟踪（链路监控）</h3><p>1.问题</p><p><img src="/2020/12/21/SpringCloud-Sleuth%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%B7%E6%B1%82%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/1.png" alt="1600257590874"></p><p>2.安装zipkin</p><p><img src="/2020/12/21/SpringCloud-Sleuth%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%B7%E6%B1%82%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/2.png" alt="1600265041699"></p><p>3.服务端payment8001和客户端order80都导入POM</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--包含了sleuth+zipkin--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a> <p>4.写YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">    <span class="attr">sleuth:</span></span><br><span class="line">      <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#采样率值介于 0 到 1 之间，1 则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>5.进行服务请求，则可进入localhost:9411/zipkin查看链路追踪</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SpringCloud-Sleuth分布式请求链路跟踪（链路监控）&quot;&gt;&lt;a href=&quot;#SpringCloud-Sleuth分布式请求链路跟踪（链路监控）&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud Sleuth分布式请求链路跟踪（链路监控）&quot;&gt;&lt;/a&gt;SpringCloud Sleuth分布式请求链路跟踪（链路监控）&lt;/h3&gt;&lt;p&gt;1.问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/21/SpringCloud-Sleuth%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%B7%E6%B1%82%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/1.png&quot; alt=&quot;1600257590874&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.安装zipkin&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/21/SpringCloud-Sleuth%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%B7%E6%B1%82%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/2.png&quot; alt=&quot;1600265041699&quot;&gt;&lt;/p&gt;
&lt;p&gt;3.服务端payment8001和客户端order80都导入POM&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--包含了sleuth+zipkin--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;spring-cloud-starter-zipkin&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://xzso3o.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud Stream消息驱动</title>
    <link href="https://xzso3o.github.io/2020/12/21/SpringCloud-Stream%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/"/>
    <id>https://xzso3o.github.io/2020/12/21/SpringCloud-Stream%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/</id>
    <published>2020-12-21T04:54:49.000Z</published>
    <updated>2020-12-21T12:17:35.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringCloud-Stream消息驱动"><a href="#SpringCloud-Stream消息驱动" class="headerlink" title="SpringCloud Stream消息驱动"></a>SpringCloud Stream消息驱动</h3><p>一句话：屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</p><p>核心：通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离</p><p><img src="/2020/12/21/SpringCloud-Stream%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/1.png" alt="1600176801553"></p><p><img src="/2020/12/21/SpringCloud-Stream%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/2.png" alt="1600175467504"></p><a id="more"></a> <h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><p>1.写POM文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.建立YML文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">stream:</span></span><br><span class="line">        <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">          <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">            <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">              <span class="attr">spring:</span></span><br><span class="line">                <span class="attr">rabbitmq:</span></span><br><span class="line">                  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.199</span><span class="number">.171</span></span><br><span class="line">                  <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                  <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                  <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">        <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理   主要配置这个Binding</span></span><br><span class="line">          <span class="attr">output:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">            <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">            <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">            <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure><p>3.在ServiceImpl书写逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBinding</span>(Source<span class="class">.<span class="keyword">class</span>) //定义消息的推送管道</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MessageProviderImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;  <span class="comment">//消息发送管道</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;<span class="comment">//往消息中间件发送流水号</span></span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());<span class="comment">//创建一个消息体并发送</span></span><br><span class="line">        System.out.println(<span class="string">"*******serial:"</span>+serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h4><p>Controller逻辑书写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(Sink<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ReceiveMessageListenerController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(Sink.INPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消费者2号,-----&gt;接受到的消息: "</span>+message.getPayload()+<span class="string">"\t  port: "</span>+serverPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="避免重复消费问题"><a href="#避免重复消费问题" class="headerlink" title="避免重复消费问题"></a>避免重复消费问题</h4><p>服务提供者发布消息，会存在被多个消费者消费的问题。因为默认分组不同，会被重复消费，同一个组才只能其中一个消费</p><p><img src="/2020/12/21/SpringCloud-Stream%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/3.png" alt="1600178378666"></p><p>解决方法：yml里添加一行group: xzsA</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">          <span class="attr">input:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">            <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">            <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span></span><br><span class="line">            <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">xzsA</span></span><br></pre></td></tr></table></figure><p>同时该group属性也对消息持久性十分重要，没有加的消费者端如果没启动，收不到消息</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SpringCloud-Stream消息驱动&quot;&gt;&lt;a href=&quot;#SpringCloud-Stream消息驱动&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud Stream消息驱动&quot;&gt;&lt;/a&gt;SpringCloud Stream消息驱动&lt;/h3&gt;&lt;p&gt;一句话：屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型&lt;/p&gt;
&lt;p&gt;核心：通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/21/SpringCloud-Stream%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/1.png&quot; alt=&quot;1600176801553&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/21/SpringCloud-Stream%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/2.png&quot; alt=&quot;1600175467504&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://xzso3o.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>GateWay网关</title>
    <link href="https://xzso3o.github.io/2020/12/21/GateWay%E7%BD%91%E5%85%B3/"/>
    <id>https://xzso3o.github.io/2020/12/21/GateWay%E7%BD%91%E5%85%B3/</id>
    <published>2020-12-21T04:53:51.000Z</published>
    <updated>2020-12-21T12:15:54.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GateWay网关"><a href="#GateWay网关" class="headerlink" title="GateWay网关"></a>GateWay网关</h3><p>核心逻辑：路由转发+执行过滤器链</p><p>三大核心概念：路由、断言、过滤</p><p>1.引入POM依赖</p><p>GateWay不需要引入web、actuator这两个依赖，本身自己带有</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--gateway--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!--eureka-client--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a> <p>2.建立YML文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line">            <span class="comment">#- After=2020-02-21T15:51:37.485+08:00[Asia/Shanghai]</span></span><br><span class="line">            <span class="comment">#- Cookie=username,zzyy</span></span><br><span class="line">            <span class="comment">#- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式</span></span><br></pre></td></tr></table></figure><p>运行过程：寻找路由里uri提供的服务地址，然后前往predicates断言下的服务地址路径，相匹配的则需要通过访问9527网关端口才可访问服务。同时可添加许多断言规则，具体搜官网</p><p><img src="/2020/12/21/GateWay%E7%BD%91%E5%85%B3/2.png" alt="01"></p><p><img src="/2020/12/21/GateWay%E7%BD%91%E5%85%B3/1.png" alt="01"></p><p>同时还可通过编码方式进行配置路由映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line"></span><br><span class="line">        routes.route(<span class="string">"path_route_xzs"</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">"/guonei"</span>)</span><br><span class="line">                        .uri(<span class="string">"http://news.baidu.com/guonei"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为配置了一个叫path_route_xzs的路由，当访问localhost:9527/guonei，则跳转到<a href="http://news.baidu.com/guonei" target="_blank" rel="noopener">http://news.baidu.com/guonei</a></p><p>3.路由过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGateWayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>,<span class="title">Ordered</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.info(<span class="string">"***********come in MyLogGateWayFilter:  "</span>+<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">"uname"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(uname == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            log.info(<span class="string">"*******用户名为null，非法用户，o(╥﹏╥)o"</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即实现两个接口GlobalFilter,Ordered，直接进行过滤规则编写。以上为访问时需带上一个uname值才可访问</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GateWay网关&quot;&gt;&lt;a href=&quot;#GateWay网关&quot; class=&quot;headerlink&quot; title=&quot;GateWay网关&quot;&gt;&lt;/a&gt;GateWay网关&lt;/h3&gt;&lt;p&gt;核心逻辑：路由转发+执行过滤器链&lt;/p&gt;
&lt;p&gt;三大核心概念：路由、断言、过滤&lt;/p&gt;
&lt;p&gt;1.引入POM依赖&lt;/p&gt;
&lt;p&gt;GateWay不需要引入web、actuator这两个依赖，本身自己带有&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--gateway--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;artifactId&amp;gt;spring-cloud-starter-gateway&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;!--eureka-client--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://xzso3o.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>Hystrix服务降级、熔断、限流</title>
    <link href="https://xzso3o.github.io/2020/12/21/Hystrix%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E3%80%81%E7%86%94%E6%96%AD%E3%80%81%E9%99%90%E6%B5%81/"/>
    <id>https://xzso3o.github.io/2020/12/21/Hystrix%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E3%80%81%E7%86%94%E6%96%AD%E3%80%81%E9%99%90%E6%B5%81/</id>
    <published>2020-12-21T04:53:10.000Z</published>
    <updated>2020-12-21T11:58:27.258Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><h4 id="一、主要三大概念"><a href="#一、主要三大概念" class="headerlink" title="一、主要三大概念"></a>一、主要三大概念</h4><p><img src="/2020/12/21/Hystrix%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E3%80%81%E7%86%94%E6%96%AD%E3%80%81%E9%99%90%E6%B5%81/1.png" alt="01"></p><h4 id="二、服务降级"><a href="#二、服务降级" class="headerlink" title="二、服务降级"></a>二、服务降级</h4><p>1.导入一些依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--hystrix--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!--openfeign--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!--eureka client--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.消费端yml文件多添加一项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3.添加注解</p><p>消费端添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br></pre></td></tr></table></figure><p>服务端添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br></pre></td></tr></table></figure><p>4.消费端通过openFeign远程调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.服务端通过注解和兜底方法进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentInfo_TimeOutHandler"</span>,commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name=<span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>,value=<span class="string">"5000"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//int age = 10/0;</span></span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.MILLISECONDS.sleep(<span class="number">3000</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池:  "</span>+Thread.currentThread().getName()+<span class="string">" id:  "</span>+id+<span class="string">"\t"</span>+<span class="string">"O(∩_∩)O哈哈~"</span>+<span class="string">"  耗时(秒): "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOutHandler</span><span class="params">(Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池:  "</span>+Thread.currentThread().getName()+<span class="string">"  8001系统繁忙或者运行报错，请稍后再试,id:  "</span>+id+<span class="string">"\t"</span>+<span class="string">"o(╥﹏╥)o"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@HystrixCommand(fallbackMethod = “paymentInfo_TimeOutHandler”,设置了paymentInfo_TimeOutHandler这个兜底方法，一旦服务发生异常或超时，则跳入到该兜底方法</p><p>，commandProperties = {<br>            @HystrixProperty(name=”execution.isolation.thread.timeoutInMilliseconds”,value=”5000”)<br>        }  设置了允许超时的秒数</p><p>6.消费端通过注解和兜底方法进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentTimeOutFallbackMethod"</span>,commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name=<span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>,value=<span class="string">"1500"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentTimeOutFallbackMethod</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,o(╥﹏╥)o"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>7.但都得写个兜底方法，导致代码膨胀。因此还可使用全局服务降级fallback</p><p>先定义全局兜底方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment_Global_FallbackMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Global异常处理信息，请稍后再试，/(ㄒoㄒ)/~~"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在类上加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"payment_Global_FallbackMethod"</span>)</span><br></pre></td></tr></table></figure><p>同时方法上只是@HystrixCommand注解，而不需要指名兜底方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="comment">//@HystrixCommand(fallbackMethod = "paymentTimeOutFallbackMethod",commandProperties = &#123;</span></span><br><span class="line">           <span class="comment">//@HystrixProperty(name="execution.isolation.thread.timeoutInMilliseconds",value="1500")</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br></pre></td></tr></table></figure><p>8.设置更全面的通用服务降级类，实现需要进行服务降级的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"-----PaymentFallbackService fall back-paymentInfo_OK ,o(╥﹏╥)o"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"-----PaymentFallbackService fall back-paymentInfo_TimeOut ,o(╥﹏╥)o"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span> ,fallback = PaymentFallbackService<span class="class">.<span class="keyword">class</span>)<span class="title">public</span> <span class="title">interface</span> <span class="title">PaymentHystrixService</span></span></span><br></pre></td></tr></table></figure><p>注解添加fallback属性指向了PaymentFallbackService这个服务降级类</p><h4 id="三、服务熔断"><a href="#三、服务熔断" class="headerlink" title="三、服务熔断"></a>三、服务熔断</h4><p>当一些服务调用失败达到一个阙值时，会对服务进行熔断。当检测到该服务正常时，能够恢复调用链路。</p><p>熔断机制注解是@HystrixCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentCircuitBreaker_fallback"</span>,commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.enabled"</span>,value = <span class="string">"true"</span>),<span class="comment">// 是否开启断路器</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.requestVolumeThreshold"</span>,value = <span class="string">"10"</span>),<span class="comment">// 请求次数</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>,value = <span class="string">"10000"</span>), <span class="comment">// 时间窗口期</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.errorThresholdPercentage"</span>,value = <span class="string">"60"</span>),<span class="comment">// 失败率达到多少后跳闸</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>表示在十秒钟之内发送十次请求，如果失败率达到60%以上就跳闸</p><p><img src="/2020/12/21/Hystrix%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E3%80%81%E7%86%94%E6%96%AD%E3%80%81%E9%99%90%E6%B5%81/2.png" alt="01"></p><p>熔断时候直接调用fallbackMethod</p><h4 id="四、服务限流"><a href="#四、服务限流" class="headerlink" title="四、服务限流"></a>四、服务限流</h4><h4 id="五、Hystrix-Dashboard服务监控"><a href="#五、Hystrix-Dashboard服务监控" class="headerlink" title="五、Hystrix Dashboard服务监控"></a>五、Hystrix Dashboard服务监控</h4><p>1.添加依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"> 其中需要监控的服务都要加上这个actuator依赖</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.主启动类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br></pre></td></tr></table></figure><p>3.在可视化页面上填写监控地址<a href="http://localhost:8001/hystrix.stream即可进行监控" target="_blank" rel="noopener">http://localhost:8001/hystrix.stream即可进行监控</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hystrix&quot;&gt;&lt;a href=&quot;#Hystrix&quot; class=&quot;headerlink&quot; title=&quot;Hystrix&quot;&gt;&lt;/a&gt;Hystrix&lt;/h3&gt;&lt;h4 id=&quot;一、主要三大概念&quot;&gt;&lt;a href=&quot;#一、主要三大概念&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://xzso3o.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>OpenFeign服务接口调用</title>
    <link href="https://xzso3o.github.io/2020/12/21/OpenFeign%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    <id>https://xzso3o.github.io/2020/12/21/OpenFeign%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</id>
    <published>2020-12-21T04:51:51.000Z</published>
    <updated>2020-12-21T12:16:04.588Z</updated>
    
    <content type="html"><![CDATA[<h3 id="OpenFeign服务接口调用"><a href="#OpenFeign服务接口调用" class="headerlink" title="OpenFeign服务接口调用"></a>OpenFeign服务接口调用</h3><p>1.引入POM文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--openfeign--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!--eureka client--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a> <p>2.建立YML文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><p>3.加注释</p><p>主启动类上加注释@EnableFeignClients </p><p>业务逻辑类上加注释@FeignClient(value = “CLOUD-PAYMENT-SERVICE（调用的服务名）”) @Component</p><p>然后直接copy自己要调用的服务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PAYMENT-SERVICE"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/21/OpenFeign%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/1.png" alt="01"></p><p>4.超时控制</p><p>默认OpenFeign只等待一秒钟，可通过yml文件进行设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><p>5.日志增强</p><p>先添加配置类，直接为FULL最全日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在yml文件里开启</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># feign日志以什么级别监控哪个接口</span></span><br><span class="line">    <span class="attr">com.xzs.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;OpenFeign服务接口调用&quot;&gt;&lt;a href=&quot;#OpenFeign服务接口调用&quot; class=&quot;headerlink&quot; title=&quot;OpenFeign服务接口调用&quot;&gt;&lt;/a&gt;OpenFeign服务接口调用&lt;/h3&gt;&lt;p&gt;1.引入POM文件&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--openfeign--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;!--eureka client--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	    &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://xzso3o.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>Ribbon服务调用</title>
    <link href="https://xzso3o.github.io/2020/12/21/Ribbon%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    <id>https://xzso3o.github.io/2020/12/21/Ribbon%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</id>
    <published>2020-12-21T04:50:57.000Z</published>
    <updated>2020-12-21T04:51:23.106Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ribbon服务调用"><a href="#Ribbon服务调用" class="headerlink" title="Ribbon服务调用"></a>Ribbon服务调用</h3><p>一句话，主要是通过RestTemplate+负载均衡实现</p><p>更换负载均衡算法：在com.xzs下添加一个myrule的包，同时创建一个rule类修改负载均衡算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();<span class="comment">//定义为随机算法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时需要在启动类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"CLOUD-PAYMENT-SERVICE"</span>,configuration= MySelfRule<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ribbon服务调用&quot;&gt;&lt;a href=&quot;#Ribbon服务调用&quot; class=&quot;headerlink&quot; title=&quot;Ribbon服务调用&quot;&gt;&lt;/a&gt;Ribbon服务调用&lt;/h3&gt;&lt;p&gt;一句话，主要是通过RestTemplate+负载均衡实现&lt;/p&gt;
&lt;p&gt;更换
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://xzso3o.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>Eureka服务注册、集群实现</title>
    <link href="https://xzso3o.github.io/2020/12/21/Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E3%80%81%E9%9B%86%E7%BE%A4%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xzso3o.github.io/2020/12/21/Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E3%80%81%E9%9B%86%E7%BE%A4%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-12-21T04:49:58.000Z</published>
    <updated>2020-12-21T12:15:41.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Eureka服务注册、集群实现"><a href="#Eureka服务注册、集群实现" class="headerlink" title="Eureka服务注册、集群实现"></a>Eureka服务注册、集群实现</h3><h4 id="一、创建Eureka服务端"><a href="#一、创建Eureka服务端" class="headerlink" title="一、创建Eureka服务端"></a>一、创建Eureka服务端</h4><p>1.引入eureka服务端依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--eureka-server--&gt;</span><br><span class="line">    &lt;dependency&gt;    </span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    </span><br><span class="line">       &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a> <p>2.编写yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">    <span class="comment">#集群指向其它eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line">    <span class="comment">#单机就是7001自己</span></span><br><span class="line"><span class="comment">#     defaultZone: http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>3.添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure><h4 id="二、创建Eureka客户端"><a href="#二、创建Eureka客户端" class="headerlink" title="二、创建Eureka客户端"></a>二、创建Eureka客户端</h4><p>1.引入eureka客户端依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--eureka-client--&gt;</span><br><span class="line">    &lt;dependency&gt;    </span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    </span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.编写yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>              <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xzs666</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer默认为true。</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单机版</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">      <span class="comment"># 集群版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.xzs.springcloud.entities</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br></pre></td></tr></table></figure><p>3.添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure><h4 id="三、通过RestTemplate调用服务"><a href="#三、通过RestTemplate调用服务" class="headerlink" title="三、通过RestTemplate调用服务"></a>三、通过RestTemplate调用服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  进行负载均衡的注解</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Eureka服务注册、集群实现&quot;&gt;&lt;a href=&quot;#Eureka服务注册、集群实现&quot; class=&quot;headerlink&quot; title=&quot;Eureka服务注册、集群实现&quot;&gt;&lt;/a&gt;Eureka服务注册、集群实现&lt;/h3&gt;&lt;h4 id=&quot;一、创建Eureka服务端&quot;&gt;&lt;a href=&quot;#一、创建Eureka服务端&quot; class=&quot;headerlink&quot; title=&quot;一、创建Eureka服务端&quot;&gt;&lt;/a&gt;一、创建Eureka服务端&lt;/h4&gt;&lt;p&gt;1.引入eureka服务端依赖&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--eureka-server--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;dependency&amp;gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-server&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://xzso3o.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>Springboot整合RabbitMQ</title>
    <link href="https://xzso3o.github.io/2020/12/21/Springboot%E6%95%B4%E5%90%88RabbitMQ/"/>
    <id>https://xzso3o.github.io/2020/12/21/Springboot%E6%95%B4%E5%90%88RabbitMQ/</id>
    <published>2020-12-21T04:43:08.000Z</published>
    <updated>2020-12-21T12:16:22.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p> 他是一种异步通信方式，消息生产者在生产消息后，把消息保存到消息队列中，直到消息消费者来取走他。消息的生产者和消费者不需要同时和消息队列交互 </p><h1 id="2-启动"><a href="#2-启动" class="headerlink" title="2.启动"></a>2.启动</h1><p>使用docker快速启动rabbitmq</p><p>docker run -d  -P rabbitmq:3-management </p><p>docker run -d –name xzs-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3-management </p><p>15672是管理端接口  5672是真正通信接口    -P随机映射到个接口  </p><p>5672映射到32771为通信接口 </p><p>15672映射到32769为管理端接口 </p><a id="more"></a> <h1 id="3-Springboot整合RabbitMQ"><a href="#3-Springboot整合RabbitMQ" class="headerlink" title="3.Springboot整合RabbitMQ"></a>3.Springboot整合RabbitMQ</h1><p>1.导入Web和RabbitMQ依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>2.配置RabbitMQ信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.host</span>=<span class="string">192.168.199.171</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.port</span>=<span class="string">32771</span></span><br></pre></td></tr></table></figure><h2 id="一、Direct"><a href="#一、Direct" class="headerlink" title="一、Direct"></a>一、Direct</h2><p>直接交换模式</p><p>配置DirectConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitDirectConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String DIRECTNAME = <span class="string">"xzs-direct"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">queue</span><span class="params">()</span></span>&#123;<span class="comment">//定义消息队列</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"hello.xzs"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DirectExchange <span class="title">directExchange</span><span class="params">()</span></span>&#123;<span class="comment">//定义消息转换器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(DIRECTNAME,<span class="keyword">true</span>,<span class="keyword">true</span>);<span class="comment">//第二个参数：重启后是否有效，第三个参数：长期没有使用是否有效</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">binding</span><span class="params">()</span></span>&#123;<span class="comment">//把上面Queue和Exchange绑定到一起</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue()).to(directExchange()).with(<span class="string">"direct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Exchange</p><p>再配置一个消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"hello.xzs"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler1</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handler1 ----&gt;"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后使用RabbitTemplate进行发送消息即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"hello.xzs"</span>,<span class="string">"hahahaha!xzs"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功接收到消息！</p><p><img src="/2020/12/21/Springboot%E6%95%B4%E5%90%88RabbitMQ/1.png" alt="01"></p><h2 id="二、Fanout"><a href="#二、Fanout" class="headerlink" title="二、Fanout"></a>二、Fanout</h2><p>所有到达Exchange的消息都转发到所有绑定到该Exchange的Queue</p><p>谁跟这个Exchange绑定了谁就能拿到消息</p><p>RabbitFanoutConfig：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitFanoutConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FANOUTNAME = <span class="string">"xzs-fanout"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">queue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"fanout.one"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">queue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"fanout.two"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(FANOUTNAME,<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">binding1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue1()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">binding2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue2()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FanoutReceiver消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"fanout.one"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler1</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handler1 -------&gt;"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"fanout.two"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler2</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handler2 -------&gt;"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用RabbitTemplate进行发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(RabbitFanoutConfig.FANOUTNAME,<span class="keyword">null</span>,<span class="string">"hello fanout！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和Exchange绑定的两个队列都拿到了消息。此时无需绑定routingKey</p><p><img src="/2020/12/21/Springboot%E6%95%B4%E5%90%88RabbitMQ/2.png" alt="02"></p><h2 id="三、Topic"><a href="#三、Topic" class="headerlink" title="三、Topic"></a>三、Topic</h2><p>Queue通过routingKey绑定到TopicExchange上，当消息到达TopicExchange时，TopicExchange会根据消息的routingKey把消息路由到一个或多个Queue上</p><p>RabbitTopicConfig：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitTopicConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String TOPICNAME = <span class="string">"xzs-topic"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">xiaomi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"xiaomi"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">huawei</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"huawei"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">phone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"phone"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TopicExchange <span class="title">topicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(TOPICNAME,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">xiaomiBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(xiaomi()).to(topicExchange()).with(<span class="string">"xiaomi.#"</span>);<span class="comment">//以小米开头的消息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">huaweiBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(huawei()).to(topicExchange()).with(<span class="string">"huawei.#"</span>);<span class="comment">//以小米开头的消息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">phoneBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(phone()).to(topicExchange()).with(<span class="string">"#.phone.#"</span>);<span class="comment">//以小米开头的消息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TopicReceiver消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"xiaomi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler1</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TopicReceiver  handler1 -------&gt;"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"huawei"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler2</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TopicReceiver  handler2 -------&gt;"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"phone"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler3</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TopicReceiver  handler3 -------&gt;"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用RabbitTemplate进行发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Testvoid</span> test2() &#123;    rabbitTemplate.convertAndSend(RabbitTopicConfig.TOPICNAME,<span class="string">"xiaomi.news"</span>,<span class="string">"小米新闻"</span>);    rabbitTemplate.convertAndSend(RabbitTopicConfig.TOPICNAME,<span class="string">"vivo.phone"</span>,<span class="string">"vivo手机"</span>);    rabbitTemplate.convertAndSend(RabbitTopicConfig.TOPICNAME,<span class="string">"huawei.phone"</span>,<span class="string">"华为手机"</span>);&#125;</span><br></pre></td></tr></table></figure><p>根据发送消息的routingKey进行消息路由转发</p><p>小米新闻就路由给了xiaomi队列</p><p>vivo手机就路由给了phone队列</p><p>华为手机就路由给了huawei队列和phone队列</p><p><img src="/2020/12/21/Springboot%E6%95%B4%E5%90%88RabbitMQ/3.png" alt="03"></p><p><img src="/2020/12/21/Springboot%E6%95%B4%E5%90%88RabbitMQ/4.png" alt="04"></p><h2 id="四、Header"><a href="#四、Header" class="headerlink" title="四、Header"></a>四、Header</h2><p> 消息的Header中只要有一个Header匹配上map的key-value，就把这个消息路由到对应的Queue上去 </p><p>RabbitHeaderConfig：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitHeaderConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADERNAME = <span class="string">"xzs-header"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">queueName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"name-queue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">queueAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"age-queue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">HeadersExchange <span class="title">headersExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeadersExchange(HEADERNAME, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>, <span class="string">"xzs"</span>);</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueName()).to(headersExchange()).whereAny(map).match();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueAge()).to(headersExchange()).where(<span class="string">"age"</span>).exists();<span class="comment">//只要你有age这个字段我就路由到age-queue上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HeaderReceiver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"name-queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler1</span><span class="params">(<span class="keyword">byte</span>[] msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HeaderReceiver:handler1 --------&gt;"</span> + <span class="keyword">new</span> String(msg, <span class="number">0</span>, msg.length));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"age-queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler2</span><span class="params">(<span class="keyword">byte</span>[] msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HeaderReceiver:handler2 --------&gt;"</span> + <span class="keyword">new</span> String(msg, <span class="number">0</span>, msg.length));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用RabbitTemplate进行发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Message nameMsg = MessageBuilder.withBody(<span class="string">"hello Header !"</span>.getBytes()).setHeader(<span class="string">"name"</span>,<span class="string">"xzs"</span>).build();</span><br><span class="line">    Message ageMsg = MessageBuilder.withBody(<span class="string">"hello Header99 !"</span>.getBytes()).setHeader(<span class="string">"age"</span>,<span class="string">"99"</span>).build();</span><br><span class="line">    rabbitTemplate.send(RabbitHeaderConfig.HEADERNAME, <span class="keyword">null</span>, ageMsg);</span><br><span class="line">    rabbitTemplate.send(RabbitHeaderConfig.HEADERNAME, <span class="keyword">null</span>, nameMsg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各自路由到各自的消息队列中去</p><p><img src="/2020/12/21/Springboot%E6%95%B4%E5%90%88RabbitMQ/5.png" alt="05"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h1&gt;&lt;p&gt; 他是一种异步通信方式，消息生产者在生产消息后，把消息保存到消息队列中，直到消息消费者来取走他。消息的生产者和消费者不需要同时和消息队列交互 &lt;/p&gt;
&lt;h1 id=&quot;2-启动&quot;&gt;&lt;a href=&quot;#2-启动&quot; class=&quot;headerlink&quot; title=&quot;2.启动&quot;&gt;&lt;/a&gt;2.启动&lt;/h1&gt;&lt;p&gt;使用docker快速启动rabbitmq&lt;/p&gt;
&lt;p&gt;docker run -d  -P rabbitmq:3-management &lt;/p&gt;
&lt;p&gt;docker run -d –name xzs-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3-management &lt;/p&gt;
&lt;p&gt;15672是管理端接口  5672是真正通信接口    -P随机映射到个接口  &lt;/p&gt;
&lt;p&gt;5672映射到32771为通信接口 &lt;/p&gt;
&lt;p&gt;15672映射到32769为管理端接口 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Springboot" scheme="https://xzso3o.github.io/categories/Springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringSecurity动态权限配置</title>
    <link href="https://xzso3o.github.io/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/"/>
    <id>https://xzso3o.github.io/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/</id>
    <published>2020-12-21T04:40:24.000Z</published>
    <updated>2020-12-21T12:18:20.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态权限配置"><a href="#动态权限配置" class="headerlink" title="动态权限配置"></a>动态权限配置</h1><p>之前我们各个用户赋予各个权限，实际中显然不行，我们需要通过后台管理动态去配置用户权限，我们可以修改用户访问权限，也可以修改用户能访问哪些资源</p><p>所以我们把权限这套东西放在数据库里，然后通过数据库里数据的关系来描述用户拥有的权限</p><p>创建各类表：</p><p>menu资源表<img src="/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/1.png" alt="1604396717980"></p><p>role角色表<img src="/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/2.png" alt="1604396749741"></p><p>user用户表<img src="/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/3.png" alt="1604396775805"></p><p>和两个关联表</p><a id="more"></a> <p>我们就可以通过用户查到用户所拥有的角色，才通过角色查询到所能访问的资源（相当于把9.基于数据库的认证里的访问权限拦截设置也放数据库里了）</p><p>原本我们这个路径是自己写死的</p><p><img src="/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/4.png" alt="1604398080044"></p><p>现在我们就需要查询数据库来得到了</p><p>如何动态地从数据库加载呢？我们就需要定义几个东西</p><p>定义一个MyFilter实现FilterInvocationSecurityMetadataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">FilterInvocationSecurityMetadataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来匹配路径</span></span><br><span class="line">    AntPathMatcher pathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MenuService menuService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据你的请求地址分析出来需要哪些角色，匹配上就返回需要的角色，没匹配上返回个默认值</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//Collection返回你需要的角色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAttributes</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求地址</span></span><br><span class="line">        String requestUrl = ((FilterInvocation) o).getRequestUrl();</span><br><span class="line">        <span class="comment">//菜单里面的pattern就定义了路径规则</span></span><br><span class="line">        List&lt;Menu&gt; allMenus = menuService.getAllMenus();</span><br><span class="line">        <span class="keyword">for</span>(Menu menu : allMenus)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pathMatcher.match(menu.getPattern(),requestUrl))&#123;<span class="comment">//如果你请求的路径和pattern里路径匹配上了</span></span><br><span class="line">                List&lt;Role&gt; roles = menu.getRoles();   <span class="comment">//拿出各个角色放入数组</span></span><br><span class="line">                String[] roleStr = <span class="keyword">new</span> String[roles.size()];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; roles.size(); i++)&#123;</span><br><span class="line">                    roleStr[i] = roles.get(i).getName();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> SecurityConfig.createList(roleStr);<span class="comment">//然后进到MyAccessDecisionManager进行角色的比较</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果路径都匹配不上，给他返回一个默认资源</span></span><br><span class="line">        <span class="keyword">return</span> SecurityConfig.createList(<span class="string">"ROLE_login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAllConfigAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sql查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllMenus"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">       select m.*,r.`id` as rid,r.`name` as rname,r.`nameZh` as rnameZh from menu m left join menu_role mr on m.`id`=mr.`mid` left join role r on mr.`rid`=r.`id`</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.xzs.springsecurity3.bean.Menu"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"pattern"</span> <span class="attr">column</span>=<span class="string">"pattern"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"com.xzs.springsecurity3.bean.Role"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rnameZh"</span> <span class="attr">property</span>=<span class="string">"nameZh"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/5.png" alt="1604398678526"></p><p>此时我们已经知道了请求路径需要哪些角色，然后我又有哪些角色，进行比较，比较成功该请求就往下走，如果你需要的角色我没有，那这就是一个非法请求</p><p>再定义一个MyAccessDecisionManager实现AccessDecisionManager接口，进行角色比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication<span class="comment">/*保存了当前登录用户的信息，知道了我有哪些角色*/</span>, Object o<span class="comment">/*用来获取当前请求对象*/</span>, Collection&lt;ConfigAttribute&gt; collection)</span><span class="comment">/*需要哪些角色的集合*/</span> <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ConfigAttribute attribute : collection) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"ROLE_login"</span>.equals(attribute.getAttribute()))&#123;</span><br><span class="line">                <span class="keyword">if</span> (authentication <span class="keyword">instanceof</span> AnonymousAuthenticationToken) &#123;<span class="comment">//如果你是个匿名用户，就是未登录</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">"非法请求!"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">            <span class="keyword">for</span> (GrantedAuthority authority : authorities) &#123;<span class="comment">//如果需要的角色集合里有一个我有的，则成功</span></span><br><span class="line">                <span class="keyword">if</span> (authority.getAuthority().equals(attribute.getAttribute())) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">"非法请求!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute configAttribute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后再在SecurityConfig里进行注入和配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   MyFilter myFilter;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   MyAccessDecisionManager myAccessDecisionManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       http.authorizeRequests()</span><br><span class="line">               .withObjectPostProcessor(<span class="keyword">new</span> ObjectPostProcessor&lt;FilterSecurityInterceptor&gt;() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="keyword">public</span> &lt;O extends FilterSecurityInterceptor&gt; <span class="function">O <span class="title">postProcess</span><span class="params">(O o)</span> </span>&#123;</span><br><span class="line">                       o.setAccessDecisionManager(myAccessDecisionManager);</span><br><span class="line">                       o.setSecurityMetadataSource(myFilter);</span><br><span class="line">                       <span class="keyword">return</span> o;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">               .and()</span><br><span class="line">               .formLogin()</span><br><span class="line">               .permitAll()</span><br><span class="line">               .and()</span><br><span class="line">               .csrf().disable();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此时进行接口访问，使用user对象登录，只拥有访问/user的权限</p><p><img src="/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/6.png" alt="1604403843728"></p><p>访问其他接口即报错</p><p><img src="/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/7.png" alt="1604403863318"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态权限配置&quot;&gt;&lt;a href=&quot;#动态权限配置&quot; class=&quot;headerlink&quot; title=&quot;动态权限配置&quot;&gt;&lt;/a&gt;动态权限配置&lt;/h1&gt;&lt;p&gt;之前我们各个用户赋予各个权限，实际中显然不行，我们需要通过后台管理动态去配置用户权限，我们可以修改用户访问权限，也可以修改用户能访问哪些资源&lt;/p&gt;
&lt;p&gt;所以我们把权限这套东西放在数据库里，然后通过数据库里数据的关系来描述用户拥有的权限&lt;/p&gt;
&lt;p&gt;创建各类表：&lt;/p&gt;
&lt;p&gt;menu资源表&lt;img src=&quot;/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/1.png&quot; alt=&quot;1604396717980&quot;&gt;&lt;/p&gt;
&lt;p&gt;role角色表&lt;img src=&quot;/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/2.png&quot; alt=&quot;1604396749741&quot;&gt;&lt;/p&gt;
&lt;p&gt;user用户表&lt;img src=&quot;/2020/12/21/SpringSecurity%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/3.png&quot; alt=&quot;1604396775805&quot;&gt;&lt;/p&gt;
&lt;p&gt;和两个关联表&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringSecurity" scheme="https://xzso3o.github.io/categories/SpringSecurity/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringSecurity基于数据库的认证</title>
    <link href="https://xzso3o.github.io/2020/12/21/SpringSecurity%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%A4%E8%AF%81/"/>
    <id>https://xzso3o.github.io/2020/12/21/SpringSecurity%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%A4%E8%AF%81/</id>
    <published>2020-12-21T04:38:10.000Z</published>
    <updated>2020-12-21T12:18:38.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基于数据库的认证"><a href="#1-基于数据库的认证" class="headerlink" title="1.基于数据库的认证"></a>1.基于数据库的认证</h1><p> 之前我们都是自己配置用户名、密码和权限，现在我们要从数据库中读取这些数据</p><p>过程：</p><p>如果我们需要自己从数据库加载用户，在定义用户时要实现UserDetail , 再实现接口里的方法 </p><p> UserDetail相当于一个规范，我们每个人定义的User属性名可能不一样，所以通过重写方法返回我们自己定义的用户名、密码等，UserDetail则可知道 </p><p>首先Bean里定义的User类需要继承UserDetail</p><a id="more"></a> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line">    <span class="keyword">private</span> Boolean locked;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//账户是否没有过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">////账户是否没有被锁定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !locked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码是否没有过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//账户是否可用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;   <span class="comment">//返回我们自己定义的字段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回用户的所有角色</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Role role : roles) &#123;<span class="comment">//SpringSecurity有一个规则，角色要以ROLE_开头，数据库如果不是这样我们就得手动加上</span></span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_"</span>+role.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(Boolean enabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocked</span><span class="params">(Boolean locked)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.locked = locked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次UserService也要实现UserDetailsService，再写mapper去数据库查询数据即可</p><p>UserService记得要注入SecurityConfig里的auth</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户名去查询用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userMapper.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户不存在!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        user.setRoles(userMapper.getUserRolesById(user.getId()));</span><br><span class="line">        <span class="comment">//登陆成功后，把user返回，至于他填的用户名和密码对不对由SpringSecurity自己去比较</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后书写SecurityConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将userService注入auth</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/dba/**"</span>).hasRole(<span class="string">"dba"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"admin"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasRole(<span class="string">"user"</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问各个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/dba/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dba</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello dba!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/admin/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello admin!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello user!"</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/21/SpringSecurity%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%A4%E8%AF%81/1.png" alt="1604395766607"></p><p>root具有dba和admin权限，admin有admin权限，user有user权限</p><p>从数据库中读取用户账户、密码，然后使用root登录</p><p> ![img](file:///C:\Users\ASUS\Documents\Tencent Files\1017477355\Image\C2C\OQA[4QB3E$M59T1<code>J@</code>{SZ4.png) </p><p>从而root只能访问/dba/hello、/admin/hello接口</p><p><img src="/2020/12/21/SpringSecurity%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%A4%E8%AF%81/2.png" alt="1604395976580"></p><p><img src="/2020/12/21/SpringSecurity%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%A4%E8%AF%81/3.png" alt="1604395988543"></p><p><img src="/2020/12/21/SpringSecurity%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%A4%E8%AF%81/4.png" alt="1604396003816"></p><h1 id="2-角色继承"><a href="#2-角色继承" class="headerlink" title="2.角色继承"></a>2.角色继承</h1><p>加上此Bean，dba就有了dab、admin、user权限，admin也有admin、user，user有user</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function">RoleHierarchy <span class="title">roleHierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       RoleHierarchyImpl roleHierarchy = <span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line">       String hierarchy = <span class="string">"ROLE_dba &gt; ROLE_admin \n ROLE_admin &gt; ROLE_user"</span>;</span><br><span class="line">       roleHierarchy.setHierarchy(hierarchy);</span><br><span class="line">       <span class="keyword">return</span> roleHierarchy;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>再次用root登录去访问/user接口</p><p><img src="/2020/12/21/SpringSecurity%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%A4%E8%AF%81/5.png" alt="1604396311487"></p><p>成功访问得到！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-基于数据库的认证&quot;&gt;&lt;a href=&quot;#1-基于数据库的认证&quot; class=&quot;headerlink&quot; title=&quot;1.基于数据库的认证&quot;&gt;&lt;/a&gt;1.基于数据库的认证&lt;/h1&gt;&lt;p&gt; 之前我们都是自己配置用户名、密码和权限，现在我们要从数据库中读取这些数据&lt;/p&gt;
&lt;p&gt;过程：&lt;/p&gt;
&lt;p&gt;如果我们需要自己从数据库加载用户，在定义用户时要实现UserDetail , 再实现接口里的方法 &lt;/p&gt;
&lt;p&gt; UserDetail相当于一个规范，我们每个人定义的User属性名可能不一样，所以通过重写方法返回我们自己定义的用户名、密码等，UserDetail则可知道 &lt;/p&gt;
&lt;p&gt;首先Bean里定义的User类需要继承UserDetail&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringSecurity" scheme="https://xzso3o.github.io/categories/SpringSecurity/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringSecurity配置</title>
    <link href="https://xzso3o.github.io/2020/12/21/SpringSecurity%E9%85%8D%E7%BD%AE/"/>
    <id>https://xzso3o.github.io/2020/12/21/SpringSecurity%E9%85%8D%E7%BD%AE/</id>
    <published>2020-12-21T04:35:43.000Z</published>
    <updated>2020-12-21T12:18:47.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HttpSecurity拦截配置"><a href="#1-HttpSecurity拦截配置" class="headerlink" title="1.HttpSecurity拦截配置"></a>1.HttpSecurity拦截配置</h1><p>我们需要配置不同的拦截规则对不同的url进行拦截</p><p>1.重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       http.authorizeRequests()  <span class="comment">//开启配置</span></span><br><span class="line">               .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"admin"</span>)<span class="comment">//ant风格的匹配符，路径符合这个规则要有哪些角色权限</span></span><br><span class="line">               .antMatchers(<span class="string">"/user/**"</span>).hasAnyRole(<span class="string">"admin"</span>,<span class="string">"user"</span>)<span class="comment">//拥有多个角色中的一个就能访问</span></span><br><span class="line">           <span class="comment">//  .antMatchers("/user/**").access("hasAnyRole('admin','user')")  和上面一样</span></span><br><span class="line">               .anyRequest().authenticated() <span class="comment">//剩下的其他请求都是authenticated，登录之后就能访问</span></span><br><span class="line">               .and()</span><br><span class="line">               .formLogin()  <span class="comment">//登录表单  主要是易于postman发送请求</span></span><br><span class="line">               .loginProcessingUrl(<span class="string">"/doLogin"</span>) <span class="comment">//处理登录的URL postman访问这个接口即可登录</span></span><br><span class="line">               .permitAll()  <span class="comment">//跟登录相关的这些接口就能访问</span></span><br><span class="line">               .and()</span><br><span class="line">               .csrf().disable();  <span class="comment">//spring security自带csrf攻击 关闭csrf攻击就能用postman</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>访问/admin的请求都需要有admin权限</p><p>访问/user的请求都需要有user权限</p><a id="more"></a> <h1 id="2-登陆表单配置"><a href="#2-登陆表单配置" class="headerlink" title="2.登陆表单配置"></a>2.登陆表单配置</h1><p>访问一个接口，spring security会默认给你跳到/login登录页面去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"admin"</span>)</span><br><span class="line"><span class="comment">//                .antMatchers("/user/**").hasAnyRole("admin","user")</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/**"</span>).access(<span class="string">"hasAnyRole('admin','user')"</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginProcessingUrl(<span class="string">"/doLogin"</span>)</span><br><span class="line">                .loginPage(<span class="string">"/login"</span>)  <span class="comment">//配置自己的登录页面</span></span><br><span class="line">                .usernameParameter(<span class="string">"uname"</span>)  <span class="comment">//postman访问的参数名</span></span><br><span class="line">                .passwordParameter(<span class="string">"pwd"</span>)</span><br><span class="line">            .successHandler(<span class="keyword">new</span> AuthenticationSuccessHandler() &#123; <span class="comment">//登录成功后的处理</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);<span class="comment">//返回json</span></span><br><span class="line">                        PrintWriter out = resp.getWriter();</span><br><span class="line">                        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                        map.put(<span class="string">"status"</span>,<span class="number">200</span>);</span><br><span class="line">                        map.put(<span class="string">"msg"</span>,authentication.getPrincipal());<span class="comment">//getPrincipal()保存了刚刚登录成功的用户对象</span></span><br><span class="line">                        out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(map));<span class="comment">//把map搞成一个json字符串写出去</span></span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            .failureHandler(<span class="keyword">new</span> AuthenticationFailureHandler()&#123; <span class="comment">//登录失败的处理</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;<span class="comment">//这时候就没有登录成功的对象authentication了，而是一个异常，通过异常我们就能知道因为什么而登录失败</span></span><br><span class="line">                        resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">                        PrintWriter out = resp.getWriter();</span><br><span class="line">                        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                        map.put(<span class="string">"status"</span>,<span class="number">401</span>);</span><br><span class="line">                        <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> LockedException)&#123;</span><br><span class="line">                            map.put(<span class="string">"msg"</span>,<span class="string">"账户被锁定，登录失败"</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> BadCredentialsException)&#123;</span><br><span class="line">                            map.put(<span class="string">"msg"</span>,<span class="string">"用户名或密码输入错误，登录失败"</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> DisabledException)&#123;</span><br><span class="line">                            map.put(<span class="string">"msg"</span>,<span class="string">"账户被禁用，登录失败"</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> AccountExpiredException)&#123;</span><br><span class="line">                            map.put(<span class="string">"msg"</span>,<span class="string">"账户过期，登录失败"</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> CredentialsExpiredException)&#123;</span><br><span class="line">                            map.put(<span class="string">"msg"</span>,<span class="string">"密码过期，登录失败"</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            map.put(<span class="string">"msg"</span>,<span class="string">"登录失败"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(map));</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/21/SpringSecurity%E9%85%8D%E7%BD%AE/1.png" alt="1604327277062"></p><p>访问后跳转到/login页面，需要进行登录</p><p>这时候使用Postman访问/doLogin接口进行登录</p><p><img src="/2020/12/21/SpringSecurity%E9%85%8D%E7%BD%AE/2.png" alt="1604326438237"></p><p>此时登录成功，再进行访问/admin/hello接口，访问成功</p><p><img src="/2020/12/21/SpringSecurity%E9%85%8D%E7%BD%AE/3.png" alt="1604327236568"></p><h1 id="3-注销登陆配置"><a href="#3-注销登陆配置" class="headerlink" title="3.注销登陆配置"></a>3.注销登陆配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .logout()</span><br><span class="line">            .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">            .logoutSuccessHandler(<span class="keyword">new</span> LogoutSuccessHandler() &#123;<span class="comment">//注销成功的回调</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                    resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">                    PrintWriter out = resp.getWriter();</span><br><span class="line">                    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">"status"</span>,<span class="number">200</span>);</span><br><span class="line">                    map.put(<span class="string">"msg"</span>,<span class="string">"注销登录成功！"</span>);</span><br><span class="line">                    out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(map));</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><p><img src="/2020/12/21/SpringSecurity%E9%85%8D%E7%BD%AE/4.png" alt="1604327611247"></p><p>此时为登录状态，访问/logout进行登录注销</p><p><img src="/2020/12/21/SpringSecurity%E9%85%8D%E7%BD%AE/5.png" alt="1604327662920"></p><p>再次访问/admin/hello，则需要再次登录</p><p><img src="/2020/12/21/SpringSecurity%E9%85%8D%E7%BD%AE/6.png" alt="1604327699659"></p><h1 id="4-多个HttpSecurity配置"><a href="#4-多个HttpSecurity配置" class="headerlink" title="4.多个HttpSecurity配置"></a>4.多个HttpSecurity配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多个HttpSecurity不再需要 extends WebSecurityConfigurerAdapter 只需注入configure方法</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiHttpSecurityConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">"xzs"</span>).password(<span class="string">"111"</span>).roles(<span class="string">"admin"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">"xxzs"</span>).password(<span class="string">"222"</span>).roles(<span class="string">"user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个静态内部类</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="comment">//有多个HttpSecurity，就涉及到优先级问题</span></span><br><span class="line">    <span class="meta">@Order</span>(<span class="number">1</span>) <span class="comment">//数字越小优先级越大</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 这种"/admin/**"格式的路径都要有admin权限</span></span><br><span class="line">            http.antMatcher(<span class="string">"/admin/**"</span>).authorizeRequests().anyRequest().hasAnyRole(<span class="string">"admin"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先跟上面匹配，匹配不上才找到这里</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            http.authorizeRequests().anyRequest().authenticated()</span><br><span class="line">                    .and()</span><br><span class="line">                    .formLogin()</span><br><span class="line">                    .loginProcessingUrl(<span class="string">"/doLogin"</span>)</span><br><span class="line">                    .permitAll()</span><br><span class="line">                    .and()</span><br><span class="line">                    .csrf().disable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-密码加密"><a href="#5-密码加密" class="headerlink" title="5.密码加密"></a>5.密码加密</h1><p><img src="/2020/12/21/SpringSecurity%E9%85%8D%E7%BD%AE/7.png" alt="1604330708908"></p><p>使用BCryptPasswordEncoder进行加密，生成一些加密密码，将这些加密密码进行替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">"xzs"</span>).password(<span class="string">"$2a$10$GPZYsEzEes4vFndEhofmneACUmfFvD/KvgblGVL.I9YdzGmMdS6PC"</span>).roles(<span class="string">"admin"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">"xxzs"</span>).password(<span class="string">"$2a$10$Kr.ZQiC/ZGoQ.5Behtuh2u.SJNladI8Mf5XG6Q4O/2ilhuOWUNkTu"</span>).roles(<span class="string">"user"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这时登录仍是用123，但密码已经被加密加盐了</p><h1 id="6-方法安全"><a href="#6-方法安全" class="headerlink" title="6.方法安全"></a>6.方法安全</h1><p>在方法上添加注解确保方法的安全</p><p>先在配置类上加@EnableGlobalMethodSecurity注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>,securedEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiHttpSecurityConfig</span></span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Service方法上添加注解</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodService</span> </span>&#123;</span><br><span class="line"><span class="comment">//@PreAuthorize方法调用之后进行校验</span></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('admin')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello admin!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Secured</span>(<span class="string">"ROLE_user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello user!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasAnyRole('admin','user')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-HttpSecurity拦截配置&quot;&gt;&lt;a href=&quot;#1-HttpSecurity拦截配置&quot; class=&quot;headerlink&quot; title=&quot;1.HttpSecurity拦截配置&quot;&gt;&lt;/a&gt;1.HttpSecurity拦截配置&lt;/h1&gt;&lt;p&gt;我们需要配置不同的拦截规则对不同的url进行拦截&lt;/p&gt;
&lt;p&gt;1.重写方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpSecurity http)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       http.authorizeRequests()  &lt;span class=&quot;comment&quot;&gt;//开启配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .antMatchers(&lt;span class=&quot;string&quot;&gt;&quot;/admin/**&quot;&lt;/span&gt;).hasRole(&lt;span class=&quot;string&quot;&gt;&quot;admin&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//ant风格的匹配符，路径符合这个规则要有哪些角色权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .antMatchers(&lt;span class=&quot;string&quot;&gt;&quot;/user/**&quot;&lt;/span&gt;).hasAnyRole(&lt;span class=&quot;string&quot;&gt;&quot;admin&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//拥有多个角色中的一个就能访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;//  .antMatchers(&quot;/user/**&quot;).access(&quot;hasAnyRole(&#39;admin&#39;,&#39;user&#39;)&quot;)  和上面一样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .anyRequest().authenticated() &lt;span class=&quot;comment&quot;&gt;//剩下的其他请求都是authenticated，登录之后就能访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .and()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .formLogin()  &lt;span class=&quot;comment&quot;&gt;//登录表单  主要是易于postman发送请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .loginProcessingUrl(&lt;span class=&quot;string&quot;&gt;&quot;/doLogin&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//处理登录的URL postman访问这个接口即可登录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .permitAll()  &lt;span class=&quot;comment&quot;&gt;//跟登录相关的这些接口就能访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .and()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .csrf().disable();  &lt;span class=&quot;comment&quot;&gt;//spring security自带csrf攻击 关闭csrf攻击就能用postman&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;访问/admin的请求都需要有admin权限&lt;/p&gt;
&lt;p&gt;访问/user的请求都需要有user权限&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringSecurity" scheme="https://xzso3o.github.io/categories/SpringSecurity/"/>
    
    
  </entry>
  
</feed>
